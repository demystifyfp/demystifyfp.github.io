<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojures on Demystify FP</title>
    <link>https://www.demystifyfp.com/clojure/</link>
    <description>Recent content in Clojures on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Fri, 12 Oct 2018 19:39:17 +0530</lastBuildDate>
    
	<atom:link href="https://www.demystifyfp.com/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RESTful CRUD APIs Using Compojure-API and Toucan (Part-1)</title>
      <link>https://www.demystifyfp.com/clojure/blog/restful-crud-apis-using-compojure-api-and-toucan-part-1/</link>
      <pubDate>Fri, 12 Oct 2018 19:39:17 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/clojure/blog/restful-crud-apis-using-compojure-api-and-toucan-part-1/</guid>
      <description>Hi,
In my last blog post on our experiences in using Clojure in production, I mentioned that we used Compojure API and Toucan to implement CRUD APIs. The abstraction that we created using these libraries helped us to create HTTP CRUD APIs for any domain entity in a matter of minutes. In this small blog-post series, I am going to share how we did it.
This first part is going to focus on developing a RESTful CRUD APIs for a specific domain entity.</description>
    </item>
    
    <item>
      <title>Using Clojure in Production</title>
      <link>https://www.demystifyfp.com/clojure/blog/clojure-in-production/</link>
      <pubDate>Wed, 26 Sep 2018 11:25:01 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/clojure/blog/clojure-in-production/</guid>
      <description>We at Ajira successfully delivered our first project in Clojure recently. It was an impressive outing for the last eight weeks!
We were able to deliver some complex features with ease because of the outstanding data-oriented programming features provided by Clojure. This blog post summarizes our experiences.
The Problem Statement The Project that we delivered was a Low Code Development Platform where the system administrator configures the way the entire application would look like &amp;amp; behave for the end user.</description>
    </item>
    
  </channel>
</rss>