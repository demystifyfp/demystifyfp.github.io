<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsharps on Demystify FP</title>
    <link>http://www.demystifyfp.com/fsharp/</link>
    <description>Recent content in Fsharps on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Sat, 19 Aug 2017 07:36:20 +0530</lastBuildDate>
    <atom:link href="/fsharp/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Serving Static Asset Files</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</link>
      <pubDate>Sat, 19 Aug 2017 07:36:20 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Welcome to third part of the &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series.&lt;/p&gt;

&lt;p&gt;In this post, we will be changing the guest home page from displaying &lt;code&gt;Hello, World!&lt;/code&gt; to a production ready landing page!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.demystifyfp.com/img/fsharp/series/fstweet/guest-home-page.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;preparing-static-asset-files&#34;&gt;Preparing Static Asset Files&lt;/h2&gt;

&lt;p&gt;As a first step let&amp;rsquo;s create an assets directory in &lt;em&gt;FsTweet.Web&lt;/em&gt; and place our static asset files. The asset files can be downloaded from the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2/src/FsTweet.Web/assets&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;└── FsTweet.Web
    ├── FsTweet.Web.fs
    ├── FsTweet.Web.fsproj
    ├── assets
    │   ├── css
    │   │   └── styles.css
    │   └── images
    │       ├── FsTweetLogo.png
    │       └── favicon.ico
    ├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modifying-master-page-and-guest-home-templates&#34;&gt;Modifying Master Page and Guest Home Templates&lt;/h2&gt;

&lt;p&gt;Then we need to change our liquid templates to use these assets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/master_page.liquid --&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;assets/css/styles.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/guest/home.liquid --&amp;gt;
&amp;lt;!-- ... --&amp;gt;
{% block content %}
&amp;lt;!-- ... --&amp;gt;
&amp;lt;div class=&amp;quot;jumbotron&amp;quot;&amp;gt;
   &amp;lt;img src=&amp;quot;assets/images/FsTweetLogo.png&amp;quot; width=&amp;quot;400px&amp;quot;/&amp;gt;
   &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;Communicate with the world in a different way!&amp;lt;/p&amp;gt;
   &amp;lt;!-- ... --&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simplicity I am leaving the other static content that are modified in the templates and you can find all the changes in &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/commit/ae233c5407900b32af682407d902621e0a17bd38#diff-62ccd7caf19fda6d153b1958919d1f9d&#34; target=&#34;_blank&#34;&gt;this diff&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;updating-build-script-to-copy-assets-directory&#34;&gt;Updating Build Script To Copy Assets Directory&lt;/h2&gt;

&lt;p&gt;As we seen during the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/#updating-build-script-to-copy-views-directory&#34; target=&#34;_blank&#34;&gt;dotliquid setup&lt;/a&gt;, we need to add an another Target &lt;code&gt;Assets&lt;/code&gt; to copy the &lt;em&gt;assets&lt;/em&gt; directory to the &lt;em&gt;build&lt;/em&gt; directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let copyToBuildDir srcDir targetDirName =
  let targetDir = combinePaths buildDir targetDirName
  CopyDir targetDir srcDir noFilter

Target &amp;quot;Assets&amp;quot; (fun _ -&amp;gt;
  copyToBuildDir &amp;quot;./src/FsTweet.Web/assets&amp;quot; &amp;quot;assets&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify the build order to run this Target before the &lt;code&gt;Run&lt;/code&gt; Target.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
==&amp;gt; &amp;quot;Views&amp;quot;
==&amp;gt; &amp;quot;Assets&amp;quot;
==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serving-asset-files&#34;&gt;Serving Asset Files&lt;/h2&gt;

&lt;p&gt;Now we have the assets available in the build directory. The next step is serving them Suave in respose to the request from the browser.&lt;/p&gt;

&lt;p&gt;Suave has a lot of &lt;a href=&#34;https://suave.io/Suave.html#def:module Suave.Files&#34; target=&#34;_blank&#34;&gt;useful functions&lt;/a&gt; to handle files and in our case we are going to make use of the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.browseHome&#34; target=&#34;_blank&#34;&gt;browseHome&lt;/a&gt; function to serve the assets&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;browse&amp;rsquo; the file in the sense that the contents of the file are sent based on the request&amp;rsquo;s Url property. Will serve from the current as configured in directory. Suave&amp;rsquo;s runtime. - Suave Documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The current directory in our case is the directory in which the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; exists. i.e &lt;em&gt;build&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.Files

// ...
let serveAssets =
  pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  // ...
  let app = 
    choose [
      serveAssets
      path &amp;quot;/&amp;quot; &amp;gt;=&amp;gt; page &amp;quot;guest/home.liquid&amp;quot; &amp;quot;&amp;quot;
    ]
    
  startWebServer defaultConfig app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have made two changes here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;serveAssets&lt;/code&gt; defines a new &lt;a href=&#34;https://theimowski.gitbooks.io/suave-music-store/content/en/webpart.html&#34; target=&#34;_blank&#34;&gt;WebPart&lt;/a&gt; using the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Filters.pathRegex&#34; target=&#34;_blank&#34;&gt;pathRegex&lt;/a&gt;. It matches all the requests for the assets and serve the corresponding files using the &lt;code&gt;browseHome&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As we are handling more than one requests now, we need to change our &lt;code&gt;app&lt;/code&gt; to handle all of them. Using the &lt;a href=&#34;https://suave.io/composing.html&#34; target=&#34;_blank&#34;&gt;choose&lt;/a&gt; function, we are defining the &lt;code&gt;app&lt;/code&gt; to combine both &lt;code&gt;serveAssets&lt;/code&gt; webpart and the one that we already had for serving guest home page.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;serving-favicon-ico&#34;&gt;Serving favicon.ico&lt;/h2&gt;

&lt;p&gt;While serving our &lt;em&gt;FsTweet&lt;/em&gt; application, the browser automatically makes a request for &lt;a href=&#34;https://en.wikipedia.org/wiki/Favicon&#34; target=&#34;_blank&#34;&gt;favicon&lt;/a&gt;. As the URL path for this request is &lt;code&gt;/favicon.ico&lt;/code&gt; our &lt;code&gt;serveAssets&lt;/code&gt; webpart cannot match this.&lt;/p&gt;

&lt;p&gt;To serve it we need to use a another specific path filter and use the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.file&#34; target=&#34;_blank&#34;&gt;file&lt;/a&gt; function to get the job done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
let serveAssets =
  let faviconPath = 
    Path.Combine(currentPath, &amp;quot;assets&amp;quot;, &amp;quot;images&amp;quot;, &amp;quot;favicon.ico&amp;quot;)
  choose [
    pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome
    path &amp;quot;/favicon.ico&amp;quot; &amp;gt;=&amp;gt; file faviconPath
  ]
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post we learned how to serve static asset files in Suave. The source code can be found in the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Server Side Rendering using DotLiquid</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/</link>
      <pubDate>Wed, 16 Aug 2017 20:34:02 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Welcome to the second part of &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; series.&lt;/p&gt;

&lt;p&gt;In this post, we are going to extend our &lt;code&gt;FsTweet&lt;/code&gt; app to render &lt;code&gt;Hello, World!&lt;/code&gt; as HTML document from the server side using &lt;a href=&#34;http://dotliquidmarkup.org/&#34; target=&#34;_blank&#34;&gt;DotLiquid&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-packages-references&#34;&gt;Adding Packages References&lt;/h2&gt;

&lt;p&gt;Suave has &lt;a href=&#34;https://suave.io/dotliquid.html&#34; target=&#34;_blank&#34;&gt;good support&lt;/a&gt; for doing server side rendering using DotLiquid. To make use of this in our project, we need to refer the associated NuGet packages in &lt;em&gt;FsTweet.Web.fsproj&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use Forge to add the required packages using Paket&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add DotLiquid -V 2.0.64
&amp;gt; forge paket add Suave.DotLiquid
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of this writing, there were some breaking changes in the latest version of DotLiquid. As the current version of Suave.DotLiquid uses DotLiquid version &lt;code&gt;2.0.64&lt;/code&gt;, we are sticking to the same here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is referring these packages in the &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do this, add the package names in the &lt;em&gt;paket.references&lt;/em&gt; file of &lt;em&gt;FsTweet.Web&lt;/em&gt; project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
DotLiquid
Suave.DotLiquid
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you prefer to do the same from your bash, you can use the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; echo &amp;gt;&amp;gt; src/FsTweet.Web/paket.references #adds an empty new line
  &amp;gt; echo &#39;DotLiquid&#39; &amp;gt;&amp;gt; src/FsTweet.Web/paket.references
  &amp;gt; echo &#39;Suave.DotLiquid&#39; &amp;gt;&amp;gt; src/FsTweet.Web/paket.references
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last step is running the &lt;code&gt;forge install&lt;/code&gt; command, an alias for the &lt;code&gt;paket install&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command adds the references of the NuGet packages provided in the &lt;em&gt;paket.references&lt;/em&gt; file to the &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;initializing-dotliquid&#34;&gt;Initializing DotLiquid&lt;/h2&gt;

&lt;p&gt;Now we have the required NuGet packages onboard&lt;/p&gt;

&lt;p&gt;DotLiquid requires the following global initilization settings to enable us to render the &lt;a href=&#34;https://shopify.github.io/liquid/&#34; target=&#34;_blank&#34;&gt;liquid templates&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A directory path which contains all our views&lt;/li&gt;
&lt;li&gt;Naming Convention to be used when referring view models in the views.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.nuget.org/packages/Suave.DotLiquid/&#34; target=&#34;_blank&#34;&gt;Suave.DotLiquid&lt;/a&gt; has helper functions to do this for us.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a directory called &lt;code&gt;views&lt;/code&gt; in the &lt;code&gt;FsTweet.Web&lt;/code&gt; project to put the liquid template files&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir src/FsTweet.Web/views
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The add a new function called &lt;code&gt;initDotLiquid&lt;/code&gt;, which invokes the required helper functions to initialize DotLiquid to use this &lt;code&gt;views&lt;/code&gt; directory for templates and &lt;code&gt;CSharpNamingConvention&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.DotLiquid
open System.IO
open System.Reflection

let currentPath =
  Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)

let initDotLiquid () =
  setCSharpNamingConvention ()
  let templatesDir = Path.Combine(currentPath, &amp;quot;views&amp;quot;)
  setTemplatesDir templatesDir

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  initDotLiquid ()
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-build-script-to-copy-views-directory&#34;&gt;Updating Build Script To Copy Views Directory&lt;/h2&gt;

&lt;p&gt;With the above DotLiquid configuration in place, while running the &lt;code&gt;FsTweet.Web&lt;/code&gt; application, we need to have the &lt;code&gt;views&lt;/code&gt; directory in the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── build
│   ├── ...
│   ├── FsTweet.Web.exe
│   └── views/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve it in two ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Adding the liquid templates files in the views directory to &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt; file with the &lt;code&gt;Build Action&lt;/code&gt; property as &lt;code&gt;Content&lt;/code&gt; and &lt;code&gt;Copy to Output&lt;/code&gt; property to either &lt;code&gt;Copy always&lt;/code&gt; or &lt;code&gt;Copy if newer&lt;/code&gt; as mentioned in the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/0c6xyb66(v=vs.100).aspx&#34; target=&#34;_blank&#34;&gt;project file properties&lt;/a&gt; documentation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second option is leveraging our build script to copy the entire &lt;code&gt;views&lt;/code&gt; directory to the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going to use the latter one as it is a one time work rather than fiddling with the properties whenever we add a new liquid template file.&lt;/p&gt;

&lt;p&gt;To do this let&amp;rsquo;s add a new Target in the FAKE build script called &lt;code&gt;Views&lt;/code&gt; and copy the directory the FAKE&amp;rsquo;s &lt;code&gt;CopyDir&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let noFilter = fun _ -&amp;gt; true

Target &amp;quot;Views&amp;quot; (fun _ -&amp;gt;
    let srcDir = &amp;quot;./src/FsTweet.Web/views&amp;quot;
    let targetDir = combinePaths buildDir &amp;quot;views&amp;quot;
    CopyDir targetDir srcDir noFilter
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify the build order to invoke &lt;code&gt;Views&lt;/code&gt; Target before &lt;code&gt;Run&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Views&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to add some liquid templates and see it in action&lt;/p&gt;

&lt;h2 id=&#34;defining-and-rending-dotliquid-templates&#34;&gt;Defining And Rending DotLiquid Templates&lt;/h2&gt;

&lt;p&gt;The first step is defining a master page template with some placeholders.&lt;/p&gt;

&lt;p&gt;Add a new file &lt;em&gt;master_page.liquid&lt;/em&gt; in the &lt;code&gt;views&lt;/code&gt; directory and update it as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/FsTweet.Web/views/master_page.liquid --&amp;gt;
&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    {% block head %}
    {% endblock %}
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
      {% block content %}
      {% endblock %}
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;scripts&amp;quot;&amp;gt;
      {% block scripts %}
      {% endblock %}
    &amp;lt;/div&amp;gt;		
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;master_page&lt;/code&gt; template defines three placeholders &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; which will be filled by its child pages.&lt;/p&gt;

&lt;p&gt;The next step is adding a child page liquid template &lt;em&gt;guest/home.liquid&lt;/em&gt; with some title and content&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;master_page.liquid&amp;quot; %}

{% block head %}
  &amp;lt;title&amp;gt; FsTweet - Powered by F# &amp;lt;/title&amp;gt;
{% endblock %}

{% block content %}
&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This guest home page template &lt;code&gt;extends&lt;/code&gt; the &lt;code&gt;master_page&lt;/code&gt; template and provides values for the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; placeholders.&lt;/p&gt;

&lt;h2 id=&#34;rendering-using-suave-dotliquid&#34;&gt;Rendering Using Suave.DotLiquid&lt;/h2&gt;

&lt;p&gt;The final step is rendering the liquid templates from Suave.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Suave.DotLiquid&lt;/em&gt; package has a function called &lt;code&gt;page&lt;/code&gt; which takes a relative file path (from the templates root directory) and a view model and returns a WebPart&lt;/p&gt;

&lt;p&gt;We just need to define the app using this &lt;code&gt;page&lt;/code&gt; function. As the page is not using a view model we can use an empty string for the second parameter.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s also add a &lt;code&gt;path&lt;/code&gt; filter in Suave to render the page only if the path is a root (&lt;code&gt;/&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.Operators
open Suave.Filters
// ...
[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  initDotLiquid ()  
  let app = 
    path &amp;quot;/&amp;quot; &amp;gt;=&amp;gt; page &amp;quot;guest/home.liquid&amp;quot; &amp;quot;&amp;quot;
  startWebServer defaultConfig app
  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you build and run the application using the &lt;code&gt;forge run&lt;/code&gt; command, you can see an HTML document with the &lt;code&gt;Hello, World!&lt;/code&gt; content in the browser on &lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34; target=&#34;_blank&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we have seen how to set up a Suave application to render server side views using DotLiquid and also how to make use of FAKE build script to manage static files.&lt;/p&gt;

&lt;p&gt;The source code is available in the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.1&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up FsTweet Project</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</link>
      <pubDate>Tue, 15 Aug 2017 20:02:30 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In this first part of the series on &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt;, we will be starting the project from scratch using and configuring it to use &lt;a href=&#34;https://fake.build/&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; and &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34; target=&#34;_blank&#34;&gt;Paket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating an empty directory with the name &lt;em&gt;FsTweet&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir FsTweet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use &lt;a href=&#34;http://forge.run/&#34; target=&#34;_blank&#34;&gt;Forge&lt;/a&gt;, a command line tool that provides tasks for creating and managing F# projects.&lt;/p&gt;

&lt;p&gt;This series uses Forge &lt;a href=&#34;https://github.com/fsharp-editing/Forge/releases/tag/1.4.2&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;version 1.4.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Post this version, Forge has been updated to work with dotnet core, and it&amp;rsquo;s not backward compatible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can install Forge, by following the &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Getting-started&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installation, initialize paket using the &lt;code&gt;forge paket init&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd FsTweet
&amp;gt; forge paket init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the &lt;em&gt;paket.exe&lt;/em&gt; in the &lt;em&gt;.paket&lt;/em&gt; directory along with &lt;em&gt;paket.dependencies&lt;/em&gt; file in the project root directory.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html#Framework-restrictions&#34; target=&#34;_blank&#34;&gt;restrict paket&lt;/a&gt; to use the .NET Framework 4.6.1 version, we need to add, &lt;code&gt;framework: net461&lt;/code&gt; in a new line in the &lt;em&gt;paket.dependencies&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you prefer to do this from your bash, you can achieve it using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo &#39;framework: net461&#39; &amp;gt;&amp;gt; paket.dependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/new-project&#34; target=&#34;_blank&#34;&gt;new project&lt;/a&gt; and adding the &lt;a href=&#34;https://fake.build/legacy-gettingstarted.html&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; using Forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Web --dir src -t suave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command creates a new console project in &lt;em&gt;./src/FsTweet.Web&lt;/em&gt; directory pre-configured with a Suave template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may encounter the following error while running this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Unhandled error:
  Could not find file &amp;quot;.../FsTweet/src/build.sh&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/issues/54#issuecomment-284559266&#34; target=&#34;_blank&#34;&gt;known issue&lt;/a&gt; in Forge which has been fixed in the later version. You can ignore it in our case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;We can verify the setup by building the project using Forge&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command internally calls the &lt;code&gt;fake&lt;/code&gt; command to build the project.&lt;/p&gt;

&lt;p&gt;Upon successful completion of this command, we can find the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; file in the &lt;em&gt;FsTweet/build&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;When you run it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;if you are on non-windows platform&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; mono build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will start the Suave standalone web server on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[21:42:45 INF] Smooth! Suave listener started in 138.226 with binding 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be seeing &lt;code&gt;Hello World!&lt;/code&gt;, when you curl the application&amp;rsquo;s root endpoint&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl http://127.0.0.1:8080/
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we will be building and running the application often during our development, let&amp;rsquo;s leverage Fake and Forge to simplify this mundane task.&lt;/p&gt;

&lt;p&gt;In the FAKE build script, &lt;em&gt;build.fsx&lt;/em&gt;, remove the &lt;code&gt;Deploy&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Deploy&amp;quot; (fun _ -&amp;gt;
    !! (buildDir + &amp;quot;/**/*.*&amp;quot;)
    -- &amp;quot;*.zip&amp;quot;
    |&amp;gt; Zip buildDir (deployDir + &amp;quot;ApplicationName.&amp;quot; + version + &amp;quot;.zip&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the &lt;code&gt;Run&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Run&amp;quot; (fun _ -&amp;gt; 
    ExecProcess 
        (fun info -&amp;gt; info.FileName &amp;lt;- &amp;quot;./build/FsTweet.Web.exe&amp;quot;)
        (System.TimeSpan.FromDays 1.)
    |&amp;gt; ignore
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name indicates, the &lt;code&gt;Run&lt;/code&gt; Target runs our application from the build directory using the &lt;a href=&#34;https://fake.build/apidocs/fake-core-process.html&#34; target=&#34;_blank&#34;&gt;ExecProcess&lt;/a&gt; function in FAKE.&lt;/p&gt;

&lt;p&gt;Then change the build order to use &lt;code&gt;Run&lt;/code&gt; instead of &lt;code&gt;Deploy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is creating &lt;em&gt;Forge.toml&lt;/em&gt; file in the root directory, &lt;em&gt;FsTweet&lt;/em&gt; and add an &lt;code&gt;run&lt;/code&gt; &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Aliases&#34; target=&#34;_blank&#34;&gt;alias&lt;/a&gt; to run Fake&amp;rsquo;s &lt;code&gt;Run&lt;/code&gt; target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Forge.toml
[alias]
  run=&#39;fake Run&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this alias in place, we can build and run our application using a single command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge run
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this part, we have learned how to bootstrap a project from scratch and configure it to use Paket and FAKE.&lt;/p&gt;

&lt;p&gt;Using Forge, we orchestrated the project setup, and the cherry on the cake is the alias to build and run our project with a single command!&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.0&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
