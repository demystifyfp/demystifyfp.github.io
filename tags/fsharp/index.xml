<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsharp on Demystify FP</title>
    <link>https://www.demystifyfp.com/tags/fsharp/</link>
    <description>Recent content in Fsharp on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Mon, 17 Dec 2018 20:50:23 +0530</lastBuildDate>
    
	<atom:link href="https://www.demystifyfp.com/tags/fsharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Model Binding in Suave and Saturn</title>
      <link>https://www.demystifyfp.com/fsharp/blog/model-binding-in-suave-and-saturn/</link>
      <pubDate>Mon, 17 Dec 2018 20:50:23 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/model-binding-in-suave-and-saturn/</guid>
      <description>In one of the fsharp project that I was part of in early this year, we encountered an interesting scenario where we need to do serialisation of a fsharp record type from the query string (and multi-part form) in Suave, and the out of the box model binding support didn&amp;rsquo;t suit our requirements.
So, we rolled out our own, and the solution came from a library which was not intended to solve this problem.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in Fsharp Using Hopac - Part 7</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-7/</link>
      <pubDate>Tue, 12 Jun 2018 05:30:26 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-7/</guid>
      <description>Hello there!
Almost eight years back Tomas Petricek wrote a blog post introducing BlockingQueueAgent and followed it up with another blog post on how to apply it to solve an Image Processing problem using the pipeline concurrency pattern.
In this blog post, we are going to learn how to port this example using Hopac&#39;s BoundedMb abstraction, aka Bounded Mailbox.
Image processing pipeline As defined by Tomas in his blog post, the image processing pipeline works as depicted in the below image.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in Fsharp Using Hopac - Part 6</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-6/</link>
      <pubDate>Wed, 25 Apr 2018 21:03:26 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-6/</guid>
      <description>Hi there!
Welcome back to the sixth part of my blog series on concurrent programming in fsharp. In this part, we are going to learn how to deal with state changes while doing concurrent programming through a fun example.
Time Bomb Simulator The example that we are going to see is a time bomb simulator. The time bomb transitions through different states as shown below during its lifecycle.

The associated fsharp type TimeBomb will have the following signature</description>
    </item>
    
    <item>
      <title>Concurrent Programming in fsharp Using Hopac - Part 5</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-5/</link>
      <pubDate>Tue, 20 Mar 2018 17:13:48 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-5/</guid>
      <description>Hi,
In the last blog post, we learned how Alt in Hopac works and its applications. In this blog post, we are going to apply what we learned so far by creating a Ticker.
Using ticker we can do something repeatedly at regular intervals.
To implement a Ticker in Hopac, we have to know one more abstraction in Hopac called IVar. So, in the first section, we are going to learn IVar and then we&#39;ll use it to implement Ticker.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in fsharp using Hopac - Part 4</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-4/</link>
      <pubDate>Fri, 16 Mar 2018 08:46:01 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-4/</guid>
      <description>Hi,
Welcome back to the fourth part of Concurrent Programming in fsharp blog post series. In part-2, we just learned that Alt&amp;lt;&#39;a&amp;gt; is a subclass of Job&amp;lt;&#39;a&amp;gt;. In this blog post, we are doing to dive deep into this abstraction and learn what it brings to the table.
An Example Before diving into the definition of Alt&amp;lt;&#39;a&amp;gt;, let&#39;s figure out why we need it in the first place.
Assume that we have a function delayedPrintn which prints a given message after n milliseconds</description>
    </item>
    
    <item>
      <title>Implementing API Gateway Pattern in fsharp using Hopac</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-3/</link>
      <pubDate>Mon, 05 Mar 2018 19:16:02 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-3/</guid>
      <description>Two years back, I wrote a blog post on how to implement the API Gateway pattern using Reactive Extensions(Rx). In this third part of concurrent programming in fsharp using Hopac blog series, we are going to revisit that blog post and port it to use Hopac instead of Reactive Extensions.
Rx vs Hopac The critical difference between Rx and Hopac is their communication model.
Rx is primarily a system for querying data in motion asynchronously, and systems built using Rx rely on asynchronous message-passing.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in Fsharp Using Hopac (Part-2)</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-2/</link>
      <pubDate>Wed, 28 Feb 2018 19:47:02 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-2/</guid>
      <description>In the last blog post, we learned the how to create jobs and run them parallelly using Hopac. In this second part of the blog post series, we are going to explore inter-job communication.
Share Memory By Communicating In multi-threaded programming model, if two threads want to communicate, the typical approach is using a shared memory backed by locks, thread-safe data structures (or other synchronisation primitives). We have to follow specific best practices to avoid Deadlocks and Race Conditions while using the shared memory approach.</description>
    </item>
    
    <item>
      <title>Concurrent Programming in fsharp using Hopac (Part-I)</title>
      <link>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-1/</link>
      <pubDate>Mon, 26 Feb 2018 19:08:32 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/concurrent-programming-in-fsharp-using-hopac-part-1/</guid>
      <description>Enabling developers to write concise code in solving complex problems is one of the significant characteristics of functional programming. The conciseness is mostly due to the abstractions provided by the functional programming language.
Can we apply these abstractions and write concurrent programs with ease?
We are going to find the answer to this question by writing concurrent programs in fsharp using the Hopac library.
What is Hopac Hopac is a fsharp library that provides a programming model inspired by John Reppy&#39;s Concurrent ML language.</description>
    </item>
    
    <item>
      <title>Adding Meaning to Primitive Types in fsharp</title>
      <link>https://www.demystifyfp.com/fsharp/blog/adding-meaning-to-primitive-types-in-fsharp/</link>
      <pubDate>Mon, 12 Feb 2018 19:23:36 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/adding-meaning-to-primitive-types-in-fsharp/</guid>
      <description>One of the recommended guidelines in Domain Driven Design is modelling the domain ideas using the domain type (CustomerName, CustomerId) instead of using their corresponding primitive type (string, int). In fsharp, with the help of Single-Case Discriminated Union, we can follow this guideline with minimal effort.
While following this practice in one of my recent project in fsharp, I came across a compelling use case, and I used a lesser-known approach to solve the problem.</description>
    </item>
    
    <item>
      <title>Introducing FsConfig</title>
      <link>https://www.demystifyfp.com/fsharp/blog/introducing-fsconfig/</link>
      <pubDate>Tue, 06 Feb 2018 19:48:26 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/introducing-fsconfig/</guid>
      <description>I am delighted to introduce a new F# library, FsConfig. FsConfig is a F# library for reading configuration data from environment variables and AppSettings with type safety
Why FsConfig? To understand FsConfig, let&amp;rsquo;s have a look at an use case from the FsTweet application.
The FsTweet application follows The Twelve-Factor App guideline for managing the configuration data. During the application bootstrap, it retrieves its ten configuration parameters from their respective environment variables.</description>
    </item>
    
    <item>
      <title>Generic Programming Made Easy</title>
      <link>https://www.demystifyfp.com/fsharp/blog/generic-programming-made-easy/</link>
      <pubDate>Fri, 15 Dec 2017 19:39:26 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/blog/generic-programming-made-easy/</guid>
      <description>Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters1.
Generic programming was part of .NET since .NET Version 2.0 and has a fascinating history as well!
For most of the use cases which involves generics, implementing them in F# is a cake-walk. However, when the generic programming requires reflection, it becomes a bumpy ride.</description>
    </item>
    
  </channel>
</rss>