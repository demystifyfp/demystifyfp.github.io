<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forge on Demystify FP</title>
    <link>https://www.demystifyfp.com/tags/forge/</link>
    <description>Recent content in Forge on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Sat, 19 Aug 2017 16:37:26 +0530</lastBuildDate>
    <atom:link href="/tags/forge/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling User signup Form</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/user-signup/</link>
      <pubDate>Sat, 19 Aug 2017 16:37:26 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/user-signup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/static-assets/&#34; target=&#34;_blank&#34;&gt;last blog post&lt;/a&gt;, we added a cool landing page for &lt;em&gt;FsTweet&lt;/em&gt; to increase the user signups. But the signup form and its backend are not ready yet!&lt;/p&gt;

&lt;p&gt;In this fourth part, we will be extending &lt;em&gt;FsTweet&lt;/em&gt; to serve the signup page and implement its backend scaffolding&lt;/p&gt;

&lt;h2 id=&#34;a-new-file-for-user-signup&#34;&gt;A New File For User Signup&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating a new file &lt;em&gt;UserSignup.fs&lt;/em&gt; in the &lt;em&gt;FsTweet.Web.fsproj&lt;/em&gt; file using Forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new file -t fs \
    -p src/FsTweet.Web/FsTweet.Web.fsproj \
    -n src/FsTweet.Web/UserSignup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is moving this file above &lt;em&gt;FsTweet.Web.fs&lt;/em&gt; file as we will be referring &lt;code&gt;UserSignup&lt;/code&gt; in the &lt;code&gt;Main&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Using Forge, we can achieve it using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge move file -p src/FsTweet.Web/FsTweet.Web.fsproj \
    -n src/FsTweet.Web/UserSignup.fs -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though working with the command line is productive than its visual counterpart, the commands that we typed for creating and moving a file is verbose.&lt;/p&gt;

&lt;p&gt;Forge has &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/aliases#alias-definition&#34; target=&#34;_blank&#34;&gt;an advanced feature called alias&lt;/a&gt; using which we can get rid of the boilerplate to a large extent.&lt;/p&gt;

&lt;p&gt;As we did for the forge &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/&#34; target=&#34;_blank&#34;&gt;Run alias&lt;/a&gt; during the project setup, let&amp;rsquo;s add few three more alias&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# ...
  web=&#39;-p src/FsTweet.Web/FsTweet.Web.fsproj&#39;
  newFs=&#39;new file -t fs&#39;
  moveUp=&#39;move file -u&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;web&lt;/code&gt; is an alias for the project argument in the Forge commands. The &lt;code&gt;newFs&lt;/code&gt; and &lt;code&gt;moveUp&lt;/code&gt; alias are for the &lt;code&gt;new file&lt;/code&gt; and &lt;code&gt;move file&lt;/code&gt; operations respectively.&lt;/p&gt;

&lt;p&gt;If we had this alias beforehand, we could have used the following commands to do what we just did&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge newFs web -n src/FsTweet.Web/UserSignup
&amp;gt; forge moveUp web -n src/FsTweet.Web/UserSignup.fs
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can generalize the alias as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;forge {operation-alias} {project-alias} {other-arguments}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use Forge to learn how to develop and manage F# projects agonistic of any editors.&lt;/p&gt;

&lt;p&gt;If you feel some of the things like, adding a new file, moving the file up/down, etc., are better using your favorite IDE/editor, you can ignore those steps and use the equivalent options provided by it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;serving-user-signup-page&#34;&gt;Serving User Signup Page&lt;/h2&gt;

&lt;p&gt;The first step is to serve the user signup page in response to the &lt;code&gt;/signup&lt;/code&gt; request from the browser.&lt;/p&gt;

&lt;p&gt;As we will be capturing the user details during signup, we need to use an view model while using the dotliquid template for the signup page.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;UserSignup.fs&lt;/em&gt;, define a namespace &lt;code&gt;UserSignup&lt;/code&gt; and a module &lt;code&gt;Suave&lt;/code&gt; with a &lt;code&gt;webPart&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web/UserSignup.fs
namespace UserSignup

module Suave =

  open Suave.Filters
  open Suave.Operators
  open Suave.DotLiquid

  //
  let webPart () =
    path &amp;quot;/signup&amp;quot;                  
      &amp;gt;=&amp;gt; page &amp;quot;user/signup.liquid&amp;quot; ??? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The namespace represents the use case or the feature that we are about to implement. The modules inside the namespace represent the different layers of the use case implementation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Suave&lt;/code&gt; module defines the &lt;code&gt;Web&lt;/code&gt; layer of the User Signup feature. You can learn about organizing modules from &lt;a href=&#34;https://fsharpforfunandprofit.com/posts/recipe-part3/&#34; target=&#34;_blank&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;???&lt;/code&gt; symbol is a placeholder that we need to fill in with a view model.&lt;/p&gt;

&lt;p&gt;The view model has to capture user&amp;rsquo;s email address, password, and username.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web/UserSignup.fs
module Suave = 
  type UserSignupViewModel = {
    Username : string
    Email : string
    Password: string
    Error : string option
  }  
  let emptyUserSignupViewModel = {
    Username = &amp;quot;&amp;quot;
    Email = &amp;quot;&amp;quot;
    Password = &amp;quot;&amp;quot;
    Error = None
  }
  let webPart () =
    path &amp;quot;/signup&amp;quot; 
      &amp;gt;=&amp;gt; page &amp;quot;user/signup.liquid&amp;quot; emptyUserSignupViewModel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name indicates, &lt;code&gt;emptyUserSignupViewModel&lt;/code&gt; provide the default values for the view model.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Error&lt;/code&gt; property in the &lt;code&gt;UserSignupViewModel&lt;/code&gt; record type is to communicate an error with the view.&lt;/p&gt;

&lt;p&gt;The next step is creating a dotliquid template for the signup page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- FsTweet.Web/views/user/signup.liquid --&amp;gt;
{% extends &amp;quot;master_page.liquid&amp;quot; %}

{% block head %}
  &amp;lt;title&amp;gt; Sign Up - FsTweet &amp;lt;/title&amp;gt;
{% endblock %}

{% block content %}
&amp;lt;form method=&amp;quot;POST&amp;quot; action=&amp;quot;/signup&amp;quot;&amp;gt;
  {% if model.Error %}
    &amp;lt;p&amp;gt;{{ model.Error.Value }}&amp;lt;/p&amp;gt;
  {% endif %}
  &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;Email&amp;quot; value={{ model.Email }}&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;Username&amp;quot; value={{ model.Username }}&amp;gt;
  &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;Password&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Sign up&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;For brevity, the styles and some HTML tags are ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the template, the &lt;code&gt;name&lt;/code&gt; attribute with its corresponding view model&amp;rsquo;s property name as value is required to do the model binding on the server side.&lt;/p&gt;

&lt;p&gt;And another thing to notice here is the &lt;code&gt;if&lt;/code&gt; condition to display the error only if it is available.&lt;/p&gt;

&lt;p&gt;The last step in serving the user signup page is adding this new webpart in the application.&lt;/p&gt;

&lt;p&gt;To do this, we just need to call the &lt;code&gt;webPart&lt;/code&gt; function while defining the &lt;code&gt;app&lt;/code&gt; in the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web/FsTweet.Web.fs
// ...
let main argv =
  // ...
  let app = 
    choose [
      // ...
      UserSignup.Suave.webPart ()
    ]
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;If we run the application and hit &lt;code&gt;http://localhost:8080/signup&lt;/code&gt; in the browser, we can see the signup page&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/signup-form.png&#34; alt=&#34;User Signup Form&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;handling-signup-form-post-request&#34;&gt;Handling Signup Form POST request&lt;/h2&gt;

&lt;p&gt;To handle the POST request during the signup form submission, we need to have a WebPart configured.&lt;/p&gt;

&lt;p&gt;On the same path &lt;code&gt;/signup&lt;/code&gt; we need to have one WebPart for serving the signup page in response to GET request and an another for the POST request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web/UserSignup.fs
module Suave =
  // ...
  open Suave 
  // ...
  let webPart () =
    path &amp;quot;/signup&amp;quot; 
      &amp;gt;=&amp;gt; choose [
        GET &amp;gt;=&amp;gt; page &amp;quot;user/signup.liquid&amp;quot; emptyUserSignupViewModel
        POST &amp;gt;=&amp;gt; ???
      ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fill the placeholder &lt;code&gt;???&lt;/code&gt;, let&amp;rsquo;s add a new WebPart &lt;code&gt;handleUserSignup&lt;/code&gt;, with a dummy implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web/UserSignup.fs
module Suave =
  // ...
  let handleUserSignup ctx = async {
    printfn &amp;quot;%A&amp;quot; ctx.request.form
    return! Redirection.FOUND &amp;quot;/signup&amp;quot; ctx
  }

  let webPart () =
    path &amp;quot;/signup&amp;quot; 
      &amp;gt;=&amp;gt; choose [
        // ...
        POST &amp;gt;=&amp;gt; handleUserSignup
      ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The placeholder implementation of the &lt;code&gt;handleUserSignup&lt;/code&gt; WebPart prints the form values posted (from the &lt;a href=&#34;https://suave.io/Suave.html#def:member Suave.Http.HttpRequest.form&#34; target=&#34;_blank&#34;&gt;request&lt;/a&gt;) in the console and redirects the user again to the signup page.&lt;/p&gt;

&lt;p&gt;When we rerun the program with this new changes, we can find the values being posted in the console upon submitting the signup form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[(&amp;quot;Email&amp;quot;, Some &amp;quot;demystifyfp@gmail.com&amp;quot;); (&amp;quot;Username&amp;quot;, Some &amp;quot;demystifyfp&amp;quot;);
 (&amp;quot;Password&amp;quot;, Some &amp;quot;secret&amp;quot;); (&amp;quot;Error&amp;quot;, Some &amp;quot;&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;model-binding-using-suave-experimental&#34;&gt;Model Binding Using Suave.Experimental&lt;/h2&gt;

&lt;p&gt;In the previous section, the &lt;code&gt;handleUserSignup&lt;/code&gt; WebPart got the form data that were posted using the &lt;code&gt;form&lt;/code&gt; member of the &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;form&lt;/code&gt; member is of type &lt;code&gt;(string * string option) list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We already have view model in place &lt;code&gt;UserSignupViewModel&lt;/code&gt; to represent the same data. The next step is converting the data&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;from {(string * string option) list} to {UserSignupViewModel}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, we need to bind the request form data to the &lt;code&gt;UserSignupViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is an inbuilt support for doing this Suave using &lt;code&gt;Suave.Experimental&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add this to our &lt;code&gt;FsTweet.Web&lt;/code&gt; project using paket and forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add Suave.Experimental -p src/FsTweet.Web/FsTweet.Web.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we add the reference, we can make use of the &lt;code&gt;bindEmptyForm&lt;/code&gt; function to carry out the model binding for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;val bindEmptyForm&amp;lt;&#39;a&amp;gt; : (req : HttpRequest) -&amp;gt; Choice&amp;lt;&#39;a, string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bindEmptyForm&lt;/code&gt; function takes a request and returns either the value of the given type or an error message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// ...
module Suave = 
  // ...
  open Suave.Form 
  // ...

  let handleUserSignup ctx = async {
    match bindEmptyForm ctx.request with
    | Choice1Of2 (userSignupViewModel : UserSignupViewModel) -&amp;gt;
      printfn &amp;quot;%A&amp;quot; userSignupViewModel
      return! Redirection.FOUND &amp;quot;/signup&amp;quot; ctx
    | Choice2Of2 err -&amp;gt;
      let viewModel = {emptyUserSignupViewModel with Error = Some err}
      return! page &amp;quot;user/signup.liquid&amp;quot; viewModel ctx
  }
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the &lt;code&gt;bindEmptyForm&lt;/code&gt; function returns a &lt;code&gt;generic&lt;/code&gt; type as its first option, we need to specify the type to enable the model binding explicitly.&lt;/p&gt;

&lt;p&gt;If the model binding succeeds, we just print the view model and redirects the user to the signup page as we did in the previous section.&lt;/p&gt;

&lt;p&gt;If it fails, we modify the viewModel with the error being returned and render the signup page again.&lt;/p&gt;

&lt;p&gt;When we rerun the program and do the form post again, we will get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{Username = &amp;quot;demystifyfp&amp;quot;;
 Email = &amp;quot;demystifyfp@gmail.com&amp;quot;;
 Password = &amp;quot;secret&amp;quot;;
 Error = None;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, We started with rendering the signup form, and then we learned how to do view model binding using the &lt;code&gt;Suave.Experimental&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.3&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Server Side Rendering using DotLiquid</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/</link>
      <pubDate>Wed, 16 Aug 2017 20:34:02 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Welcome to the second part of &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/intro/&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; series.&lt;/p&gt;

&lt;p&gt;In this post, we are going to extend our &lt;code&gt;FsTweet&lt;/code&gt; app to render &lt;code&gt;Hello, World!&lt;/code&gt; as HTML document from the server side using &lt;a href=&#34;http://dotliquidmarkup.org/&#34; target=&#34;_blank&#34;&gt;DotLiquid&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-packages-references&#34;&gt;Adding Packages References&lt;/h2&gt;

&lt;p&gt;Suave has &lt;a href=&#34;https://suave.io/dotliquid.html&#34; target=&#34;_blank&#34;&gt;good support&lt;/a&gt; for doing server side rendering using DotLiquid. To make use of this in our project, we need to refer the associated NuGet packages in &lt;em&gt;FsTweet.Web.fsproj&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use Forge to add the required packages using Paket&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add DotLiquid -V 2.0.64
&amp;gt; forge paket add Suave.DotLiquid
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of this writing, there are some breaking changes in the latest version of DotLiquid. As the current version of Suave.DotLiquid uses DotLiquid version &lt;code&gt;2.0.64&lt;/code&gt;, we are sticking to the same here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is referring these packages in the &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do this, add the package names in the &lt;em&gt;paket.references&lt;/em&gt; file of &lt;em&gt;FsTweet.Web&lt;/em&gt; project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
DotLiquid
Suave.DotLiquid
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If you prefer to do the same from your bash, you can use the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; echo &amp;gt;&amp;gt; src/FsTweet.Web/paket.references #adds an empty new line
  &amp;gt; echo &#39;DotLiquid&#39; &amp;gt;&amp;gt; src/FsTweet.Web/paket.references
  &amp;gt; echo &#39;Suave.DotLiquid&#39; &amp;gt;&amp;gt; src/FsTweet.Web/paket.references
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last step is running the &lt;code&gt;forge install&lt;/code&gt; command, an alias for the &lt;code&gt;paket install&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command adds the references of the NuGet packages provided in the &lt;em&gt;paket.references&lt;/em&gt; file to the &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;initializing-dotliquid&#34;&gt;Initializing DotLiquid&lt;/h2&gt;

&lt;p&gt;Now we have the required NuGet packages onboard&lt;/p&gt;

&lt;p&gt;DotLiquid requires the following global initilization settings to enable us to render the &lt;a href=&#34;https://shopify.github.io/liquid/&#34; target=&#34;_blank&#34;&gt;liquid templates&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A directory path which contains all our views&lt;/li&gt;
&lt;li&gt;Naming Convention to be used when referring view models in the views.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.nuget.org/packages/Suave.DotLiquid/&#34; target=&#34;_blank&#34;&gt;Suave.DotLiquid&lt;/a&gt; has helper functions to do this for us.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a directory called &lt;code&gt;views&lt;/code&gt; in the &lt;code&gt;FsTweet.Web&lt;/code&gt; project to put the liquid template files&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir src/FsTweet.Web/views
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The add a new function called &lt;code&gt;initDotLiquid&lt;/code&gt;, which invokes the required helper functions to initialize DotLiquid to use this &lt;code&gt;views&lt;/code&gt; directory for templates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.DotLiquid
open System.IO
open System.Reflection

let currentPath =
  Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)

let initDotLiquid () =
  let templatesDir = Path.Combine(currentPath, &amp;quot;views&amp;quot;)
  setTemplatesDir templatesDir

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  initDotLiquid ()
  setCSharpNamingConvention ()
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, DotLiquid uses Ruby Naming Convention to refer the view model properties in the liquid template. For example, if you are passing a record type having a property &lt;code&gt;UserId&lt;/code&gt; as a view model while using it in the liquid template, we have to use &lt;code&gt;user_id&lt;/code&gt; instead of &lt;code&gt;UserId&lt;/code&gt; to access the value.&lt;/p&gt;

&lt;p&gt;We are overriding this default convention by calling the &lt;code&gt;setCSharpNamingConvention&lt;/code&gt; function from the &lt;code&gt;Suave.DotLiquid&lt;/code&gt; library.&lt;/p&gt;

&lt;h2 id=&#34;updating-build-script-to-copy-views-directory&#34;&gt;Updating Build Script To Copy Views Directory&lt;/h2&gt;

&lt;p&gt;With the above DotLiquid configuration in place, while running the &lt;code&gt;FsTweet.Web&lt;/code&gt; application, we need to have the &lt;code&gt;views&lt;/code&gt; directory in the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── build
│   ├── ...
│   ├── FsTweet.Web.exe
│   └── views/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve it in two ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Adding the liquid templates files in the views directory to &lt;code&gt;FsTweet.Web.fsproj&lt;/code&gt; file with the &lt;code&gt;Build Action&lt;/code&gt; property as &lt;code&gt;Content&lt;/code&gt; and &lt;code&gt;Copy to Output&lt;/code&gt; property to either &lt;code&gt;Copy always&lt;/code&gt; or &lt;code&gt;Copy if newer&lt;/code&gt; as mentioned in the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/0c6xyb66(v=vs.100).aspx&#34; target=&#34;_blank&#34;&gt;project file properties&lt;/a&gt; documentation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The second option is leveraging our build script to copy the entire &lt;code&gt;views&lt;/code&gt; directory to the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going to use the latter one as it is a one time work rather than fiddling with the properties whenever we add a new liquid template file.&lt;/p&gt;

&lt;p&gt;To do this let&amp;rsquo;s add a new Target in the FAKE build script called &lt;code&gt;Views&lt;/code&gt; and copy the directory the FAKE&amp;rsquo;s &lt;code&gt;CopyDir&lt;/code&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let noFilter = fun _ -&amp;gt; true

Target &amp;quot;Views&amp;quot; (fun _ -&amp;gt;
    let srcDir = &amp;quot;./src/FsTweet.Web/views&amp;quot;
    let targetDir = combinePaths buildDir &amp;quot;views&amp;quot;
    CopyDir targetDir srcDir noFilter
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify the build order to invoke &lt;code&gt;Views&lt;/code&gt; Target before &lt;code&gt;Run&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Views&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to add some liquid templates and see it in action&lt;/p&gt;

&lt;h2 id=&#34;defining-and-rending-dotliquid-templates&#34;&gt;Defining And Rending DotLiquid Templates&lt;/h2&gt;

&lt;p&gt;The first step is defining a master page template with some placeholders.&lt;/p&gt;

&lt;p&gt;Add a new file &lt;em&gt;master_page.liquid&lt;/em&gt; in the &lt;code&gt;views&lt;/code&gt; directory and update it as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/FsTweet.Web/views/master_page.liquid --&amp;gt;
&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    {% block head %}
    {% endblock %}
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
      {% block content %}
      {% endblock %}
    &amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;scripts&amp;quot;&amp;gt;
      {% block scripts %}
      {% endblock %}
    &amp;lt;/div&amp;gt;		
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;master_page&lt;/code&gt; template defines three placeholders &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; which will be filled by its child pages.&lt;/p&gt;

&lt;p&gt;The next step is adding a child page liquid template &lt;em&gt;guest/home.liquid&lt;/em&gt; with some title and content&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% extends &amp;quot;master_page.liquid&amp;quot; %}

{% block head %}
  &amp;lt;title&amp;gt; FsTweet - Powered by F# &amp;lt;/title&amp;gt;
{% endblock %}

{% block content %}
&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This guest home page template &lt;code&gt;extends&lt;/code&gt; the &lt;code&gt;master_page&lt;/code&gt; template and provides values for the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; placeholders.&lt;/p&gt;

&lt;h2 id=&#34;rendering-using-suave-dotliquid&#34;&gt;Rendering Using Suave.DotLiquid&lt;/h2&gt;

&lt;p&gt;The final step is rendering the liquid templates from Suave.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Suave.DotLiquid&lt;/em&gt; package has a function called &lt;code&gt;page&lt;/code&gt; which takes a relative file path (from the templates root directory) and a view model and returns a WebPart&lt;/p&gt;

&lt;p&gt;We just need to define the app using this &lt;code&gt;page&lt;/code&gt; function. As the page is not using a view model we can use an empty string for the second parameter.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s also add a &lt;code&gt;path&lt;/code&gt; filter in Suave to render the page only if the path is a root (&lt;code&gt;/&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.Operators
open Suave.Filters
// ...
[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  initDotLiquid ()  
  let app = 
    path &amp;quot;/&amp;quot; &amp;gt;=&amp;gt; page &amp;quot;guest/home.liquid&amp;quot; &amp;quot;&amp;quot;
  startWebServer defaultConfig app
  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you build and run the application using the &lt;code&gt;forge run&lt;/code&gt; command, you can see an HTML document with the &lt;code&gt;Hello, World!&lt;/code&gt; content in the browser on &lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34; target=&#34;_blank&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we have seen how to set up a Suave application to render server side views using DotLiquid and also how to make use of FAKE build script to manage static files.&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.1&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up FsTweet Project</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</link>
      <pubDate>Tue, 15 Aug 2017 20:02:30 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In this first part of the series on &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/intro/&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt;, we will be starting the project from scratch and configuring it to use &lt;a href=&#34;https://fake.build/&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; and &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34; target=&#34;_blank&#34;&gt;Paket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating an empty directory with the name &lt;em&gt;FsTweet&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir FsTweet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use &lt;a href=&#34;http://forge.run/&#34; target=&#34;_blank&#34;&gt;Forge&lt;/a&gt;, a command line tool that provides tasks for creating and managing F# projects.&lt;/p&gt;

&lt;p&gt;This series uses Forge &lt;a href=&#34;https://github.com/fsharp-editing/Forge/releases/tag/1.4.2&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;version 1.4.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Post this version, Forge has been updated to work with dotnet core, and it&amp;rsquo;s not backward compatible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can install Forge, by following the &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Getting-started&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installation, initialize paket using the &lt;code&gt;forge paket init&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd FsTweet
&amp;gt; forge paket init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the &lt;em&gt;paket.exe&lt;/em&gt; in the &lt;em&gt;.paket&lt;/em&gt; directory along with &lt;em&gt;paket.dependencies&lt;/em&gt; file in the project root directory.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html#Framework-restrictions&#34; target=&#34;_blank&#34;&gt;restrict paket&lt;/a&gt; to use the .NET Framework 4.6.1 version, we need to add, &lt;code&gt;framework: net461&lt;/code&gt; in a new line in the &lt;em&gt;paket.dependencies&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you prefer to do this from your command line interface, you can achieve it using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo &#39;framework: net461&#39; &amp;gt;&amp;gt; paket.dependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/new-project&#34; target=&#34;_blank&#34;&gt;new project&lt;/a&gt; and adding the &lt;a href=&#34;https://fake.build/legacy-gettingstarted.html&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; using Forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Web --dir src -t suave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command creates a new console project in &lt;em&gt;./src/FsTweet.Web&lt;/em&gt; directory pre-configured with a Suave template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may encounter the following error while running this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Unhandled error:
  Could not find file &amp;quot;.../FsTweet/src/build.sh&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/issues/54#issuecomment-284559266&#34; target=&#34;_blank&#34;&gt;known issue&lt;/a&gt; in Forge which has been fixed in the later version. You can ignore it in our case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;We can verify the setup by building the project using Forge&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command internally calls the &lt;code&gt;fake&lt;/code&gt; command to build the project.&lt;/p&gt;

&lt;p&gt;Upon successful completion of this command, we can find the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; file in the &lt;em&gt;FsTweet/build&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;When you run it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;if you are on non-windows platform&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; mono build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will start the Suave standalone web server on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[21:42:45 INF] Smooth! Suave listener started in 138.226 with binding 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be seeing &lt;code&gt;Hello World!&lt;/code&gt;, when you curl the application&amp;rsquo;s root endpoint&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl http://127.0.0.1:8080/
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we will be building and running the application often during our development, let&amp;rsquo;s leverage Fake and Forge to simplify this mundane task.&lt;/p&gt;

&lt;p&gt;In the FAKE build script, &lt;em&gt;build.fsx&lt;/em&gt;, remove the &lt;code&gt;Deploy&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Deploy&amp;quot; (fun _ -&amp;gt;
    !! (buildDir + &amp;quot;/**/*.*&amp;quot;)
    -- &amp;quot;*.zip&amp;quot;
    |&amp;gt; Zip buildDir (deployDir + &amp;quot;ApplicationName.&amp;quot; + version + &amp;quot;.zip&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the &lt;code&gt;Run&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Run&amp;quot; (fun _ -&amp;gt; 
    ExecProcess 
        (fun info -&amp;gt; info.FileName &amp;lt;- &amp;quot;./build/FsTweet.Web.exe&amp;quot;)
        (System.TimeSpan.FromDays 1.)
    |&amp;gt; ignore
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name indicates, the &lt;code&gt;Run&lt;/code&gt; Target runs our application from the build directory using the &lt;a href=&#34;https://fake.build/apidocs/fake-core-process.html&#34; target=&#34;_blank&#34;&gt;ExecProcess&lt;/a&gt; function in FAKE.&lt;/p&gt;

&lt;p&gt;Then change the build order to use &lt;code&gt;Run&lt;/code&gt; instead of &lt;code&gt;Deploy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is creating &lt;em&gt;Forge.toml&lt;/em&gt; file in the root directory, &lt;em&gt;FsTweet&lt;/em&gt; and add an &lt;code&gt;run&lt;/code&gt; &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Aliases&#34; target=&#34;_blank&#34;&gt;alias&lt;/a&gt; to run Fake&amp;rsquo;s &lt;code&gt;Run&lt;/code&gt; target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Forge.toml
[alias]
  run=&#39;fake Run&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this alias in place, we can build and run our application using a single command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge run
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;From here on, the term &lt;em&gt;run/test drive the application&lt;/em&gt; in the following blog posts implies running this &lt;code&gt;forge run&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this part, we have learned how to bootstrap a project from scratch and configure it to use Paket and FAKE.&lt;/p&gt;

&lt;p&gt;Using Forge, we orchestrated the project setup, and the cherry on the cake is the alias to build and run our project with a single command!&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.0&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
