<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fake on Demystify FP</title>
    <link>https://www.demystifyfp.com/tags/fake/</link>
    <description>Recent content in Fake on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Wed, 08 Nov 2017 07:11:34 +0530</lastBuildDate>
    <atom:link href="/tags/fake/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying to Azure App Service</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/deploying-to-azure-app-service/</link>
      <pubDate>Wed, 08 Nov 2017 07:11:34 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/deploying-to-azure-app-service/</guid>
      <description>

&lt;p&gt;Hi There!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s great to see you back in the twenty first part of &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/intro/&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series.&lt;/p&gt;

&lt;p&gt;In this blog post, we are going to prepare our code for deployment and we&amp;rsquo;ll be deploying our FsTweet Application in Azure using &lt;a href=&#34;https://azure.microsoft.com/en-in/services/app-service/&#34; target=&#34;_blank&#34;&gt;Azure App Service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;

&lt;h2 id=&#34;revisiting-database-interaction&#34;&gt;Revisiting Database Interaction&lt;/h2&gt;

&lt;p&gt;The first place that we need to touch to prepare FsTweet for deployment is &lt;em&gt;Db.fs&lt;/em&gt;. Especially, the below lines in this file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&amp;lt;Literal&amp;gt;]
let private connString = 
  &amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SQLProvider &lt;a href=&#34;http://fsprojects.github.io/SQLProvider/core/parameters.html&#34; target=&#34;_blank&#34;&gt;requires connection string&lt;/a&gt; should be available &lt;a href=&#34;http://fsprojects.github.io/SQLProvider/core/parameters.html&#34; target=&#34;_blank&#34;&gt;during compile time&lt;/a&gt; in order to create types from the database to which it is connected to.&lt;/p&gt;

&lt;p&gt;In other words, we need a live database (with schemas defined) to compile the FsTweet.&lt;/p&gt;

&lt;p&gt;In our build script, we are running the migration script to create/modify the tables before compilation of the application. So, we don&amp;rsquo;t need to worry about the database schema.&lt;/p&gt;

&lt;p&gt;Similarly, In runtime, we are getting the connection string from an environment variable and using it to initialize the database connection&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// src/FsTweet.Web/FsTweet.Web.fs
// ...
let main argv =
  // ...
  let fsTweetConnString = 
   Environment.GetEnvironmentVariable  &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
  // ...
  let getDataCtx = dataContext fsTweetConnString
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The real concern is if we are going with the current code as it is, while compiling the code on a cloud machine, that machine has to have a local postgres database which can be accessed using the above connection string literal.&lt;/p&gt;

&lt;p&gt;We can have a separate database (accessible from anywhere) for this purpose alone and uses that as a literal. But there are lot of drawbacks!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now we need to maintain two databases, one for compilation and another one for running in production&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It means our migration script has to run on both the databases.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We also need to makes sure that the database schema should be same in both the databases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s lot of work(!) for an obvious task! So, this approach is not practical.&lt;/p&gt;

&lt;p&gt;Before arriving at the solution, Let&amp;rsquo;s think about what would be an ideal scenario.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provision a production ready PostgreSQL database&lt;/li&gt;
&lt;li&gt;Set the connection string of this database as the value of environment varialbe &lt;code&gt;FSTWEET_DB_CONN_STRING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the migration script&lt;/li&gt;
&lt;li&gt;Compile (Build) the application&lt;/li&gt;
&lt;li&gt;Run the application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step is manual and the rest of the steps are already taken care by our FAKE build script.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;ll be adding a separate step in our build script to run the application on cloud.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make this ideal scenario work, we need an intermediate step between three and four, which takes the connection string from the environment variable and replaces the connection string literal in &lt;em&gt;Db.fs&lt;/em&gt; with this one. After successful compilation, we need to revert this change.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s super easy with our build script. Let&amp;rsquo;s make it work!&lt;/p&gt;

&lt;p&gt;We are already having the local connection string in the build script which we are using if there is no value in the &lt;code&gt;FSTWEET_DB_CONN_STRING&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let connString = 
  environVarOrDefault 
    &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
    @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s extract this out and define a binding for this value&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ let localDbConnString = 
+   @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;

let connString = 
  environVarOrDefault 
    &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
-   @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
+   localDbConnString
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add a build target, to verify the presence of this connection string in the &lt;em&gt;Db.fs&lt;/em&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let dbFilePath = &amp;quot;./src/FsTweet.Web/Db.fs&amp;quot;

Target &amp;quot;VerifyLocalDbConnString&amp;quot; (fun _ -&amp;gt;
  let dbFileContent = File.ReadAllText dbFilePath
  if not (dbFileContent.Contains(localDbConnString)) then
    failwith &amp;quot;local db connection string mismatch&amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are adding this target, to ensure that the local database connection string that we have it here is same as that of in &lt;em&gt;Db.fs&lt;/em&gt; file before replacing it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define a helper function &lt;code&gt;swapDbFileContent&lt;/code&gt;, which swaps the connection string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let swapDbFileContent (oldValue: string) (newValue : string) =
  let dbFileContent = File.ReadAllText dbFilePath
  let newDbFileContent = dbFileContent.Replace(oldValue, newValue)
  File.WriteAllText(dbFilePath, newDbFileContent)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add two targets in the build target, one to change the connection string and an another one to revert the change.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;ReplaceLocalDbConnStringForBuild&amp;quot; (fun _ -&amp;gt; 
  swapDbFileContent localDbConnString connString
)
Target &amp;quot;RevertLocalDbConnStringChange&amp;quot; (fun _ -&amp;gt; 
  swapDbFileContent connString localDbConnString
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a last step, alter the build order to leverage the targets that we created just now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  // Build order
  &amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;BuildMigrations&amp;quot;
  ==&amp;gt; &amp;quot;RunMigrations&amp;quot;
+ ==&amp;gt; &amp;quot;VerifyLocalDbConnString&amp;quot;
+ ==&amp;gt; &amp;quot;ReplaceLocalDbConnStringForBuild&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
+ ==&amp;gt; &amp;quot;RevertLocalDbConnStringChange&amp;quot;
  ==&amp;gt; &amp;quot;Views&amp;quot;
  ==&amp;gt; &amp;quot;Assets&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;h2 id=&#34;supporting-f-compiler-4-0&#34;&gt;Supporting F# Compiler 4.0&lt;/h2&gt;

&lt;p&gt;At the time of this writing, The F# Compiler version that has been supported by Azure App Service is 4.0. But we developed the application using F# 4.1. So, we have to compile our code using F# 4.0 before deploying.&lt;/p&gt;

&lt;p&gt;When we compile our application using F# 4.0 compiler, we&amp;rsquo;ll get an compiler error&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...\FsTweet.Web\Json.fs(17,41): 
  Unexpected identifier in type constraint. 
Expected infix operator, quote symbol or other token.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The piece of code that is bothering here is this one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let inline deserialize&amp;lt; ^a when (^a or FromJsonDefaults) 
                          : (static member FromJson: ^a -&amp;gt; ^a Json)&amp;gt; 
                          req : Result&amp;lt; ^a, string&amp;gt; =
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you check out the &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/03/07/announcing-f-4-1-and-the-visual-f-tools-for-visual-studio-2017-2/&#34; target=&#34;_blank&#34;&gt;release notes of F# 4.1&lt;/a&gt;, you can find there are some improvements made on Statically Resolved Type Parameter support to fix this error (or bug).&lt;/p&gt;

&lt;p&gt;Fortunately, rest of codebase are in tact with F# 4.0 and we just need to fix this one.&lt;/p&gt;

&lt;p&gt;As a first step, comment out the &lt;code&gt;deserialize&lt;/code&gt; function in the &lt;code&gt;JSON&lt;/code&gt; module and the add the following new implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// src/FsTweet.Web/Json.fs
// ...

// Json -&amp;gt; Choice&amp;lt;&#39;a, string&amp;gt; -&amp;gt; HttpRequest -&amp;gt; Result&amp;lt;&#39;a, string&amp;gt;
let deserialize tryDeserialize req =
  parse req
  |&amp;gt; bind (fun json -&amp;gt; tryDeserialize json |&amp;gt; ofChoice)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new version of the &lt;code&gt;deserialize&lt;/code&gt; is similar to the old one except that we are going to get the function &lt;code&gt;Json.tryDeserialize&lt;/code&gt; as a parameter (&lt;code&gt;tryDeserialize&lt;/code&gt;) instead of using it directly inside the function.&lt;/p&gt;

&lt;p&gt;Then we have to update the places where this function is being used&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// src/FsTweet.Web/Social.fs
...
let handleFollowUser (followUser : FollowUser) (user : User) ctx = async {	
- match JSON.deserialize ctx.request with
+ match JSON.deserialize Json.tryDeserialize ctx.request with
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// src/FsTweet.Web/Social.fs
...
let handleNewTweet publishTweet (user : User) ctx = async {
- match JSON.deserialize ctx.request with
+ match JSON.deserialize Json.tryDeserialize ctx.request  with
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;http-bindings&#34;&gt;Http Bindings&lt;/h2&gt;

&lt;p&gt;We are currently using default HTTP bindings provided by Suave. So, when we run our application locally, the web server will be listening on the default port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But when we are running it in Azure or in any other cloud vendor, we have to use the port providing by them.&lt;/p&gt;

&lt;p&gt;In addition to that, the default HTTP binding uses the loopback address &lt;code&gt;127.0.0.1&lt;/code&gt; instead of &lt;code&gt;0.0.0.0&lt;/code&gt; which makes it &lt;a href=&#34;https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost&#34; target=&#34;_blank&#34;&gt;non-accessible&lt;/a&gt; from the other hosts.&lt;/p&gt;

&lt;p&gt;We have to fix both of these, in order to run our application in cloud.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// src/FsTweet.Web/FsTweet.Web.fs
// ...
open System.Net
// ...
let main argv = 
  // ...

+ let ipZero = IPAddress.Parse(&amp;quot;0.0.0.0&amp;quot;)
  
+ let port = 
+   Environment.GetEnvironmentVariable &amp;quot;PORT&amp;quot;

+ let httpBinding =
+   HttpBinding.create HTTP ipZero (uint16 port)

  let serverConfig = 
    {defaultConfig with 
-     serverKey = serverKey}
+     serverKey = serverKey
+     bindings=[httpBinding]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are getting the port number to listen from the environment variable &lt;code&gt;PORT&lt;/code&gt; and modifying the &lt;code&gt;defaultConfig&lt;/code&gt; to use the custom http binding instead of the default one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Azure App Service, the port to listen is already available in the environment variable &lt;code&gt;HTTP_PLATFORM_PORT&lt;/code&gt;. But we are using &lt;code&gt;PORT&lt;/code&gt; here to avoid cloud vendor specific stuffs in the codebase. Later via configuration (outside the codebase), we will be mapping these environment variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;the-web-config-file&#34;&gt;The web.config File&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suave.io/azure-app-service.html&#34; target=&#34;_blank&#34;&gt;As mentioned&lt;/a&gt; in Suave&amp;rsquo;s documention, we need to have a web.config to instruct IIS to route the traffic to Suave.&lt;/p&gt;

&lt;p&gt;Create a new file &lt;em&gt;web.config&lt;/em&gt; in the root directory and update it as below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; touch web.config
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;

    &amp;lt;handlers&amp;gt;
      &amp;lt;remove name=&amp;quot;httpplatformhandler&amp;quot; /&amp;gt;
      &amp;lt;add
        name=&amp;quot;httpplatformhandler&amp;quot;
        path=&amp;quot;*&amp;quot;
        verb=&amp;quot;*&amp;quot;
        modules=&amp;quot;httpPlatformHandler&amp;quot;
        resourceType=&amp;quot;Unspecified&amp;quot;
      /&amp;gt;
    &amp;lt;/handlers&amp;gt;

    &amp;lt;httpPlatform 
      stdoutLogEnabled=&amp;quot;false&amp;quot;
      startupTimeLimit=&amp;quot;20&amp;quot; 
      processPath=&amp;quot;%HOME%\site\wwwroot\FsTweet.Web.exe&amp;quot;
      &amp;gt;

      &amp;lt;environmentVariables&amp;gt;
        &amp;lt;environmentVariable name=&amp;quot;PORT&amp;quot; value=&amp;quot;%HTTP_PLATFORM_PORT%&amp;quot; /&amp;gt;
      &amp;lt;/environmentVariables&amp;gt;
    &amp;lt;/httpPlatform&amp;gt;
    
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the above content was copied from the documentation and we have modified the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;processPath&lt;/code&gt; - specifies the location of the &lt;code&gt;FsTweet.Web&lt;/code&gt; executable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environmentVariables&lt;/code&gt; - creates a new envrionment variable &lt;code&gt;PORT&lt;/code&gt; with the value from the environment variable &lt;code&gt;HTTP_PLATFORM_PORT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdoutLogEnabled&lt;/code&gt; - disables &lt;em&gt;stdout&lt;/em&gt; log. (We&amp;rsquo;ll revisit it the next blog post)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;revisiting-build-script&#34;&gt;Revisiting Build Script&lt;/h2&gt;

&lt;p&gt;To deploy FsTweet on Azure App Service we are going to use &lt;a href=&#34;https://github.com/projectkudu&#34; target=&#34;_blank&#34;&gt;Kudu&lt;/a&gt;. FAKE library has good support for Kudu and we can deploy our application right from our build script.&lt;/p&gt;

&lt;p&gt;FAKE library provides a &lt;code&gt;kuduSync&lt;/code&gt; function which copies with semantic appropriate for deploying web site files. Before calling &lt;code&gt;kuduSync&lt;/code&gt;, we need to stage the files (in a temporary directory) that has to be copied. This staging directory path can be retrieved from the FAKE Library&amp;rsquo;s &lt;code&gt;deploymentTemp&lt;/code&gt; binding. Then the &lt;code&gt;kuduSync&lt;/code&gt; function sync the files for deployment.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deploymentTemp&lt;/code&gt; directory is exact replica of our local &lt;code&gt;build&lt;/code&gt; directory on the deloyment side. So, instead of staging the files explicitly, we can use this directory as build directory. An another benefit is user account which will be deploying has full access to this directory.&lt;/p&gt;

&lt;p&gt;To do the deployment from our build script, we first need to know what is the environment that we are in through the environment variable &lt;code&gt;FSTWEET_ENVIRONMENT&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
open Fake.Azure

let env = environVar &amp;quot;FSTWEET_ENVIRONMENT&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on this &lt;code&gt;env&lt;/code&gt; value, we can set the build directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;// build.fsx
// ...

let env = environVar &amp;quot;FSTWEET_ENVIRONMENT&amp;quot; 

- // Directories		
- let buildDir  = &amp;quot;./build/&amp;quot;		
- let deployDir = &amp;quot;./deploy/&amp;quot;

+ let buildDir  = 
+   if env = &amp;quot;dev&amp;quot; then 
+     &amp;quot;./build&amp;quot; 
+   else 
+     Kudu.deploymentTemp

// ...

  Target &amp;quot;Clean&amp;quot; (fun _ -&amp;gt;
-   CleanDirs [buildDir; deployDir]		
+   CleanDirs [buildDir]
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For dev environment, we&amp;rsquo;ll be using &lt;code&gt;./build&lt;/code&gt; as build directory and &lt;code&gt;Kudu.deploymentTemp&lt;/code&gt; as build directory in the other environments. We&amp;rsquo;ve also removed the &lt;code&gt;deployDir&lt;/code&gt; (that was part of the auto-genrated build file) as we are not using it.&lt;/p&gt;

&lt;p&gt;Then we need to two more targets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...

Target &amp;quot;CopyWebConfig&amp;quot; ( fun _ -&amp;gt;
  FileHelper.CopyFile Kudu.deploymentTemp &amp;quot;web.config&amp;quot;)

Target &amp;quot;Deploy&amp;quot; Kudu.kuduSync

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;CopyWebConfig&lt;/code&gt; copies the &lt;code&gt;web.config&lt;/code&gt; to the &lt;code&gt;Kudu.deploymentTemp&lt;/code&gt; directory (aka staging directory).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Deploy&lt;/code&gt; just calls the &lt;code&gt;Kudu.kuduSync&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The last thing that we need to revist in the build script is the build order.&lt;/p&gt;

&lt;p&gt;We need two build orders. One to run the application locally (which we already have) and another one to deploy. In the latter case, the we don&amp;rsquo;t need to run the application explicitly as Azure Web App takes cares of executing our application using the &lt;em&gt;web.config&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;To make it possible, Replace the existing build order with the below one&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...

// Build order
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;BuildMigrations&amp;quot;
==&amp;gt; &amp;quot;RunMigrations&amp;quot;
==&amp;gt; &amp;quot;VerifyLocalDbConnString&amp;quot;
==&amp;gt; &amp;quot;ReplaceLocalDbConnStringForBuild&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
==&amp;gt; &amp;quot;RevertLocalDbConnStringChange&amp;quot;
==&amp;gt; &amp;quot;Views&amp;quot;
==&amp;gt; &amp;quot;Assets&amp;quot;


&amp;quot;Assets&amp;quot;
==&amp;gt; &amp;quot;Run&amp;quot;

&amp;quot;Assets&amp;quot;
==&amp;gt; &amp;quot;CopyWebConfig&amp;quot;
==&amp;gt; &amp;quot;Deploy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have two different Target execution hiearchy. Refer &lt;a href=&#34;https://fake.build/legacy-core-targets.html&#34; target=&#34;_blank&#34;&gt;this detailed documentation&lt;/a&gt; to know how the order hierarchy works in FAKE.&lt;/p&gt;

&lt;h2 id=&#34;invoking-build-script&#34;&gt;Invoking Build Script&lt;/h2&gt;

&lt;p&gt;We have a build script that automates all the required activities to do the deployment. But, who is going to run the this script in the first place?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s where &lt;a href=&#34;https://github.com/projectkudu/kudu/wiki/Customizing-deployments#deployment-file&#34; target=&#34;_blank&#34;&gt;.deployment file&lt;/a&gt; comes into picture.&lt;/p&gt;

&lt;p&gt;Usign this file, we can specify what command to run to deploy the application in Azure App Service.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create this file in the application&amp;rsquo;s root directory and update it to invoke the build script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; touch .deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[config]
command = build.cmd Deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;build.cmd&lt;/em&gt; was created by Forge during project initialization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this we are done with all the coding changes that are required to perform the deployment.&lt;/p&gt;

&lt;h2 id=&#34;postgresql-database-setup&#34;&gt;PostgreSQL Database Setup&lt;/h2&gt;

&lt;p&gt;To run FsTweet on cloud, we need to have a database on the cloud. We can make use of &lt;a href=&#34;https://www.elephantsql.com/&#34; target=&#34;_blank&#34;&gt;ElephantSQL&lt;/a&gt; which provides a &lt;a href=&#34;https://www.elephantsql.com/plans.html&#34; target=&#34;_blank&#34;&gt;free plan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new free database instance in ElephantSQL and note down its credentails to pass it as a connection string to our application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/elephant_sql_credentials.png&#34; alt=&#34;ElephantSQL credentials&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;getstream-io-setup&#34;&gt;GetStream.io Setup&lt;/h2&gt;

&lt;p&gt;Next thing that we need to set up is &lt;em&gt;GetStream.io&lt;/em&gt; as we can&amp;rsquo;t use the one that we used during development.&lt;/p&gt;

&lt;p&gt;Create a new app called &lt;em&gt;fstweet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/getstream_new_app.png&#34; alt=&#34;GetStream New App Creation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And create two &lt;em&gt;flat feed&lt;/em&gt; groups, &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;timeline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/getstream_new_feed.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/getstream_feeds.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After creation keep a note of the App Id, Key and Secret&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/getstream_key_and_secret.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;postmark-setup&#34;&gt;Postmark Setup&lt;/h2&gt;

&lt;p&gt;Regarding Postmark, we don&amp;rsquo;t need to create a &lt;a href=&#34;https://account.postmarkapp.com/servers&#34; target=&#34;_blank&#34;&gt;new server&lt;/a&gt; account as we are not using it in development environment.&lt;/p&gt;

&lt;p&gt;However, we have to modify the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/sending-verification-email/#configuring-signup-email-template&#34; target=&#34;_blank&#34;&gt;signup email template&lt;/a&gt; to the use the URL of the deployed application instead of the localhost URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-  http://localhost:8080/signup/verify/{{ verification_code }}
+  http://fstweet.azurewebsites.net/signup/verify/{{ verification_code }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-azure-app-service&#34;&gt;Create Azure App Service&lt;/h2&gt;

&lt;p&gt;With all the dependent services are up, our next focus is deploying the application in azure app service.&lt;/p&gt;

&lt;p&gt;To deploy the application, we are going to use &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli?view=azure-cli-latest&#34; target=&#34;_blank&#34;&gt;Azure CLI&lt;/a&gt;. It offers an convinent way to manage azure resource easily from the command line.&lt;/p&gt;

&lt;p&gt;Make sure, you are having this &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&#34; target=&#34;_blank&#34;&gt;CLI installed&lt;/a&gt; in your machine as well as &lt;a href=&#34;https://azure.microsoft.com/en-us/free/&#34; target=&#34;_blank&#34;&gt;an active Azure Subscription&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing that we have to do is Log in to our azure account from Azure CLI. There are &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli?view=azure-cli-latest&#34; target=&#34;_blank&#34;&gt;multiple ways&lt;/a&gt; we can log in and authenticate with the Azure CLI and here we are going to use the &lt;em&gt;Interactive log-in&lt;/em&gt; option.&lt;/p&gt;

&lt;p&gt;Run the login command and then in the web browser go the given URL and enter the provided code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; az login
To sign in, use a web browser to open the page https://aka.ms/devicelogin and 
  enter the code H2ABMSZR3 to authenticate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then log in using the subscription that you wanted to use.&lt;/p&gt;

&lt;p&gt;Upon successful log in, you will get a similar JSON as the output in the command prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  {
    &amp;quot;cloudName&amp;quot;: &amp;quot;AzureCloud&amp;quot;,
    &amp;quot;id&amp;quot;: &amp;quot;900b4d47-d0c4-888a-9e6d-000061c82010&amp;quot;,
    &amp;quot;isDefault&amp;quot;: true,
    &amp;quot;name&amp;quot;: &amp;quot;...&amp;quot;,
    &amp;quot;state&amp;quot;: &amp;quot;Enabled&amp;quot;,
    &amp;quot;tenantId&amp;quot;: &amp;quot;9f67d6b5-5cb4-8fc0-a5cc-345f9cd46e7a&amp;quot;,
    &amp;quot;user&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;...&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;user&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/app-service-deployment-credentials&#34; target=&#34;_blank&#34;&gt;new deployment user&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A deployment user is required for doing local git deployment to a web app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; az webapp deployment user set --user-name fstdeployer --password secret123
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;id&amp;quot;: null,
  &amp;quot;kind&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;web&amp;quot;,
  &amp;quot;publishingPassword&amp;quot;: null,
  &amp;quot;publishingPasswordHash&amp;quot;: null,
  &amp;quot;publishingPasswordHashSalt&amp;quot;: null,
  &amp;quot;publishingUserName&amp;quot;: &amp;quot;fstdeployer&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;Microsoft.Web/publishingUsers/web&amp;quot;,
  &amp;quot;userName&amp;quot;: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing is creating a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-overview#resource-groups&#34; target=&#34;_blank&#34;&gt;resource group&lt;/a&gt; in Azure.&lt;/p&gt;

&lt;p&gt;A resource group is a logical container into which Azure resources like web apps, databases, and storage accounts are deployed and managed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; az group create --name fsTweetResourceGroup --location &amp;quot;Central US&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;You can get a list of all the locations available using the &lt;code&gt;az appservice list-locations&lt;/code&gt; command&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;id&amp;quot;: &amp;quot;/subscriptions/{id}/resourceGroups/fsTweetResourceGroup&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;centralus&amp;quot;,
  &amp;quot;managedBy&amp;quot;: null,
  &amp;quot;name&amp;quot;: &amp;quot;fsTweetResourceGroup&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;
  },
  &amp;quot;tags&amp;quot;: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To host our application in Azure App Service we first need to have a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/azure-web-sites-web-hosting-plans-in-depth-overview&#34; target=&#34;_blank&#34;&gt;Azure App Service Plan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s creates an App Service plan named &lt;code&gt;fsTweetServicePlan&lt;/code&gt; in the Free pricing tier&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; az appservice plan create --name fsTweetServicePlan --resource-group fsTweetResourceGroup --sku FREE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;fsTweetServicePlan&amp;quot;,
  &amp;quot;provisioningState&amp;quot;: &amp;quot;Succeeded&amp;quot;,
  &amp;quot;resourceGroup&amp;quot;: &amp;quot;fsTweetResourceGroup&amp;quot;,
  &amp;quot;sku&amp;quot;: {
    ...
    &amp;quot;tier&amp;quot;: &amp;quot;Free&amp;quot;
  },
  &amp;quot;status&amp;quot;: &amp;quot;Ready&amp;quot;,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then using the &lt;code&gt;az webapp create&lt;/code&gt; command, create a new &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/app-service-web-overview&#34; target=&#34;_blank&#34;&gt;web app&lt;/a&gt; in the App Service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; az webapp create --name fstweet --resource-group fsTweetResourceGroup \
  --plan fsTweetServicePlan --deployment-local-git
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Local git is configured with url of 
  &#39;https://fstdeployer@fstweet.scm.azurewebsites.net/fstweet.git&#39;
{
  // a big json object
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;--deployment-local-git&lt;/code&gt; flag, creates a remote git directory for the web app and we will be using it to push our local git repository and deploy the changes.&lt;/p&gt;

&lt;p&gt;Note down the URL of the git repository as we&amp;rsquo;ll be using it shortly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve created an empty web app, with git deployment enabled. If you visit the &lt;a href=&#34;http://fstweet.azurewebsites.net/&#34; target=&#34;_blank&#34;&gt;http://fstweet.azurewebsites.net/&lt;/a&gt; site now, we can see an empty web app page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/azure_empty_app.png&#34; alt=&#34;Empty Web App Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We are just two commands away from deploying our application in Azure.&lt;/p&gt;

&lt;p&gt;The FsTweet Application uses a set of environment variables to get the application&amp;rsquo;s configuration parameters (Connection string, GetStream secret, etc.,). To make these environment variables avilable for the application, we can leverage the App Settings.&lt;/p&gt;

&lt;p&gt;Open the &lt;a href=&#34;http://portal.azure.com&#34; target=&#34;_blank&#34;&gt;Azure Portal&lt;/a&gt;, Click &lt;em&gt;App Services&lt;/em&gt; on the left and then click &lt;em&gt;fstweet&lt;/em&gt; from the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/azure_portal_app_services.png&#34; alt=&#34;Azure App Service&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;fstweet&lt;/em&gt; app service dashboard, click on &lt;em&gt;Applciation Settings&lt;/em&gt; and enter all the required configuration parameters and don&amp;rsquo;t forget to click the &lt;em&gt;Save&lt;/em&gt; button!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/app_services_app_settings.png&#34; alt=&#34;App Settings&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can do this using &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/webapp/config/appsettings?view=azure-cli-latest#az_webapp_config_appsettings_set&#34; target=&#34;_blank&#34;&gt;Azure CLI appsettings&lt;/a&gt; command as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now all set for deploying the application.&lt;/p&gt;

&lt;p&gt;Add the git URL that we get after creating the web app as &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes&#34; target=&#34;_blank&#34;&gt;git remote&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; git remote add azure \
    https://fstdeployer@fstweet.scm.azurewebsites.net/fstweet.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This command assumes that the project directory is under git version control. If you haven&amp;rsquo;t done it yet, use the following commands to setup the git repository&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; git init
&amp;gt; git add -A
&amp;gt; git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last step is pushing our local git repository to the azure (alias of the remote git repository). It will prompt you to enter the password. Provide the password that we used to create the deployment user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; git push azure master
Passsword for &#39;https://fstdeployer@fstweet.scm.azurewebsites.net&#39;: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then sit back and watch the launch!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Counting objects: 1102, done.
Delta compression using up to 4 threads.
....
....
....
remote: ------------------------------------------------------
remote: Build Time Report
remote: ------------------------------------------------------
remote: Target                             Duration
remote: ------                             --------
remote: Clean                              00:00:00.0018425
remote: BuildMigrations                    00:00:01.1475457
remote: RunMigrations                      00:00:01.9743288
remote: VerifyLocalDbConnString            00:00:00.0035704
remote: ReplaceLocalDbConnStringForBuild   00:00:00.0065504
remote: Build                              00:00:45.9225862
remote: RevertLocalDbConnStringChange      00:00:00.0060335
remote: Views                              00:00:00.0625286
remote: Assets                             00:00:00.0528166
remote: CopyWebConfig                      00:00:00.0094524
remote: Deploy                             00:00:00.9716061
remote: Total:                             00:00:50.2883751
remote: ------------------------------------------------------
remote: Status:                            Ok
remote: ------------------------------------------------------
remote: Running post deployment command(s)...
remote: Deployment successful.
To https://fstweet.scm.azurewebsites.net/fstweet.git
   f40d33c..a2a7732  master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! We made it!!&lt;/p&gt;

&lt;p&gt;Now if you browse the site, we can see the beautiful landing page :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/azure_deplyed.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the deployment, if we want make any change, just do a git commit after making the changes and push it to the remote as we did now!&lt;/p&gt;

&lt;p&gt;If we don&amp;rsquo;t want to do it manually, we can &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/app-service-continuous-deployment&#34; target=&#34;_blank&#34;&gt;enable contionus deployment&lt;/a&gt; from the azure portal.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we have made changes to codebase to enable the deployment and deployed our application on Azure using Azure CLI.&lt;/p&gt;

&lt;p&gt;We owe a lot of thanks to FAKE, which made our job easier.&lt;/p&gt;

&lt;p&gt;The source code assoiciated with this blog post is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.20&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-part&#34;&gt;Next Part&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;Adding Logs using Logary&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up Database Migration</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</link>
      <pubDate>Sat, 26 Aug 2017 18:47:29 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/user-signup-validation/&#34; target=&#34;_blank&#34;&gt;last blog post&lt;/a&gt;, we validated the signup details submitted by the user and transformed it into a domain model.&lt;/p&gt;

&lt;p&gt;The next step is persisting it in a database. We are going to use &lt;a href=&#34;https://www.postgresql.org&#34; target=&#34;_blank&#34;&gt;PostgreSQL&lt;/a&gt; to achieve it.&lt;/p&gt;

&lt;p&gt;In this sixth part of the &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series, we are going to learn how to setup PostgreSQL database migrations in fsharp using &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/orchestrating-user-signup/&#34; target=&#34;_blank&#34;&gt;following blog post&lt;/a&gt;, we will be orchastrating the user signup.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-database-migrations-project&#34;&gt;Creating a Database Migrations Project&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;s is one of the widely used Migration frameworks in .NET outside &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/jj591621(v=vs.113).aspx&#34; target=&#34;_blank&#34;&gt;EF code first migrations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we are not going to use EF in favor of &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt;, we are picking the fluent migrator to help us in managing the database schema.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating a new class library project, &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt;, in the &lt;em&gt;src&lt;/em&gt; directory, using forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Db.Migrations \
    --folder src -t classlib --no-fake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is adding the &lt;em&gt;FluentMigrator&lt;/em&gt; NuGet package and referring it in the newly created &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt; project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add FluentMigrator -g Database \
    -p src/FsTweet.Db.Migrations/FsTweet.Db.Migrations.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the paket&amp;rsquo;s &lt;a href=&#34;https://fsprojects.github.io/Paket/groups.html&#34; target=&#34;_blank&#34;&gt;dependency grouping&lt;/a&gt; feature using the &lt;code&gt;-g&lt;/code&gt; argument with the value &lt;code&gt;Database&lt;/code&gt;. It allows us to organize the dependencies better&lt;/p&gt;

&lt;p&gt;&lt;em&gt;paket.dependencies&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

group Database
source https://www.nuget.org/api/v2

nuget FluentMigrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator/wiki/Migration&#34; target=&#34;_blank&#34;&gt;a migration&lt;/a&gt; in Fluent Migrator, we need to create a new class inheriting Fluent Migrator&amp;rsquo;s &lt;code&gt;Migration&lt;/code&gt; abstract class.&lt;/p&gt;

&lt;p&gt;This class also has to have an attribute &lt;code&gt;Migration&lt;/code&gt; to specify the order of the migration and also it should override the &lt;code&gt;Up&lt;/code&gt; and &lt;code&gt;Down&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Fsharp provides nicer support &lt;a href=&#34;https://fsharpforfunandprofit.com/series/object-oriented-programming-in-fsharp.html&#34; target=&#34;_blank&#34;&gt;to write OO code&lt;/a&gt;. So writing the migration is straight forward and we don&amp;rsquo;t need to go back to &lt;em&gt;C#!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a first step, clean up the default code in the &lt;code&gt;FsTweet.Db.Migrations.fs&lt;/code&gt; file and update it as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace FsTweet.Db.Migrations

open FluentMigrator

[&amp;lt;Migration(201709250622L, &amp;quot;Creating User Table&amp;quot;)&amp;gt;]
type CreateUserTable()=
  inherit Migration()

  override this.Up() = ()
  override this.Down() = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;https://lostechies.com/seanchambers/2011/04/02/fluentmigrator-getting-started/&#34; target=&#34;_blank&#34;&gt;suggested&lt;/a&gt; by &lt;a href=&#34;https://lostechies.com/seanchambers/author/seanchambers/&#34; target=&#34;_blank&#34;&gt;Sean Chambers&lt;/a&gt;, one of core contributor of fluent migrator, we are using a time stamp in &lt;code&gt;YYYYMMDDHHMM&lt;/code&gt; format in UTC to specify the migration order.&lt;/p&gt;

&lt;p&gt;The next step is using the fluent methods offered by the fluent migrator we need to define the &lt;code&gt;Users&lt;/code&gt; table and its columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// ...
type CreateUserTable()=
  // ...
  override this.Up() = 
    base.Create.Table(&amp;quot;Users&amp;quot;)
      .WithColumn(&amp;quot;Id&amp;quot;).AsInt32().PrimaryKey().Identity()
      .WithColumn(&amp;quot;Username&amp;quot;).AsString(12).Unique().NotNullable()
      .WithColumn(&amp;quot;Email&amp;quot;).AsString(254).Unique().NotNullable()
      .WithColumn(&amp;quot;PasswordHash&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;EmailVerificationCode&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;IsEmailVerified&amp;quot;).AsBoolean()
    |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is overriding the &lt;code&gt;Down&lt;/code&gt; method. In the &lt;code&gt;Down&lt;/code&gt; method, we just need to delete the &lt;code&gt;Users&lt;/code&gt; table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type CreateUserTable()=
  // ...
  override this.Down() = 
    base.Delete.Table(&amp;quot;Users&amp;quot;) |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-the-migrations-project&#34;&gt;Building the Migrations Project&lt;/h2&gt;

&lt;p&gt;Now we have the migrations project in place, and it is all set to build and run.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a new FAKE Target &lt;code&gt;BuildMigrations&lt;/code&gt; in the build script to build the migrations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;BuildMigrations&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Db.Migrations/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot; 
  |&amp;gt; Log &amp;quot;MigrationBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to change the existing &lt;code&gt;Build&lt;/code&gt; target to build only the &lt;code&gt;FsTweet.Web&lt;/code&gt; project instead of all the &lt;code&gt;.fsproj&lt;/code&gt; projects in the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;Build&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Web/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot;
  |&amp;gt; Log &amp;quot;AppBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the migration against Postgres, we need to install the &lt;a href=&#34;http://www.npgsql.org/&#34; target=&#34;_blank&#34;&gt;Npgsql&lt;/a&gt; package from NuGet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add Npgsql -g Database --version 3.1.10
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of this writing there is &lt;a href=&#34;https://github.com/npgsql/npgsql/issues/1603&#34; target=&#34;_blank&#34;&gt;an issue&lt;/a&gt; with the latest version of Npgsql. So, we are using the version &lt;code&gt;3.1.10&lt;/code&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FAKE has inbuilt support for &lt;a href=&#34;https://fake.build/todo-fluentmigrator.html&#34; target=&#34;_blank&#34;&gt;running fluent migration&lt;/a&gt; from the build script.&lt;/p&gt;

&lt;p&gt;To do it add the references of the &lt;code&gt;FluentMigrator&lt;/code&gt; and &lt;code&gt;Npgsql&lt;/code&gt; DLLs in the build script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
#r &amp;quot;./packages/FAKE/tools/Fake.FluentMigrator.dll&amp;quot;
#r &amp;quot;./packages/database/Npgsql/lib/net45/Npgsql.dll&amp;quot;
// ...
open Fake.FluentMigratorHelper
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then define &lt;code&gt;RunMigrations&lt;/code&gt; Target with a &lt;code&gt;connString&lt;/code&gt; and a &lt;code&gt;dbConnection&lt;/code&gt; pointing to a local database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
let dbConnection = ConnectionString (connString, DatabaseProvider.PostgreSQL)

Target &amp;quot;RunMigrations&amp;quot; (fun _ -&amp;gt; 
  MigrateToLatest dbConnection [migrationsAssembly] DefaultMigrationOptions
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This migration script &lt;strong&gt;doesn&amp;rsquo;t create the database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, we need to create it manually before we run the script.&lt;/p&gt;

&lt;p&gt;The last step in running the migration script is adding it to the build script build order.&lt;/p&gt;

&lt;p&gt;We need to run the migrations before the &lt;code&gt;Build&lt;/code&gt; target, as we need to have the database schema in place to use &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt; to interact with the PostgreSQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;BuildMigrations&amp;quot;
==&amp;gt; &amp;quot;RunMigrations&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the build.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This command is an inbuilt alias in forge representing the &lt;code&gt;forge fake Build&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the build script is running, we can see the console log of the &lt;code&gt;RunMigrations&lt;/code&gt; target like the one below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
Starting Target: RunMigrations (==&amp;gt; BuildMigrations)
...
----------------------------------------------------
201709250622: CreateUserTable migrating
----------------------------------------------------
[+] Beginning Transaction
[+] CreateTable Users
[+] Committing Transaction
[+] 201709250622: CreateUserTable migrated
[+] Task completed.
Finished Target: RunMigrations
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon successful execution of the build script, we can verify the schema using &lt;a href=&#34;https://www.postgresql.org/docs/9.6/static/app-psql.html&#34; target=&#34;_blank&#34;&gt;psql&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; psql -d FsTweet
psql (9.6.2, server 9.5.1)
Type &amp;quot;help&amp;quot; for help.

FsTweet=# \d &amp;quot;Users&amp;quot;
                            Table &amp;quot;public.Users&amp;quot;

        Column         |          Type          |                      Modifiers
-----------------------+------------------------+------------------------------------------------------
 Id                    | integer                | not null default nextval(&#39;&amp;quot;Users_Id_seq&amp;quot;&#39;::regclass)
 Username              | character varying(12)  | not null
 Email                 | character varying(254) | not null
 PasswordHash          | text                   | not null
 EmailVerificationCode | text                   | not null
 IsEmailVerified       | boolean                | not null
Indexes:
    &amp;quot;PK_Users&amp;quot; PRIMARY KEY, btree (&amp;quot;Id&amp;quot;)
    &amp;quot;IX_Users_Email&amp;quot; UNIQUE, btree (&amp;quot;Email&amp;quot;)
    &amp;quot;IX_Users_Username&amp;quot; UNIQUE, btree (&amp;quot;Username&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool! The migrations went well :)&lt;/p&gt;

&lt;h2 id=&#34;extending-the-connection-string&#34;&gt;Extending the Connection String&lt;/h2&gt;

&lt;p&gt;In the script that we ran, the connection string is hard coded. To make it reusable across different build environments, we need to get it from the environment variable.&lt;/p&gt;

&lt;p&gt;FAKE has function &lt;code&gt;environVarOrDefault&lt;/code&gt;, which takes the value from the given environment name and if the environment variable is not available, it returns the provided default value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use this function in our build script to make it reusable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  environVarOrDefault 
    &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
    @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we learned how to set up database migration using Fluent Migrator in fsharp and leverage FAKE to run the migrations while running the build script.&lt;/p&gt;

&lt;p&gt;The source code for this blog post is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.5&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-part&#34;&gt;Next Part&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/orchestrating-user-signup/&#34; target=&#34;_blank&#34;&gt;Orchestrating User Signup&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serving Static Asset Files</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</link>
      <pubDate>Sat, 19 Aug 2017 07:36:20 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Welcome to the third part of the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/intro/&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series.&lt;/p&gt;

&lt;p&gt;In this post, we will be changing the guest homepage from displaying &lt;code&gt;Hello, World!&lt;/code&gt; to a production ready landing page!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.demystifyfp.com/img/fsharp/series/fstweet/guest-home-page.png&#34; alt=&#34;Guest Home Page&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;preparing-static-asset-files&#34;&gt;Preparing Static Asset Files&lt;/h2&gt;

&lt;p&gt;As a first step let&amp;rsquo;s create an assets directory in &lt;em&gt;FsTweet.Web&lt;/em&gt; and place our static asset files. The asset files can be downloaded from the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2/src/FsTweet.Web/assets&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;└── FsTweet.Web
    ├── FsTweet.Web.fs
    ├── FsTweet.Web.fsproj
    ├── assets
    │   ├── css
    │   │   └── styles.css
    │   └── images
    │       ├── FsTweetLogo.png
    │       └── favicon.ico
    ├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modifying-master-page-and-guest-home-templates&#34;&gt;Modifying Master Page and Guest Home Templates&lt;/h2&gt;

&lt;p&gt;Then we need to change our liquid templates to use these assets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/master_page.liquid --&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;assets/css/styles.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/guest/home.liquid --&amp;gt;
&amp;lt;!-- ... --&amp;gt;
{% block content %}
&amp;lt;!-- ... --&amp;gt;
&amp;lt;div class=&amp;quot;jumbotron&amp;quot;&amp;gt;
   &amp;lt;img src=&amp;quot;assets/images/FsTweetLogo.png&amp;quot; width=&amp;quot;400px&amp;quot;/&amp;gt;
   &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;Communicate with the world in a different way!&amp;lt;/p&amp;gt;
   &amp;lt;!-- ... --&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simplicity, I am leaving the other static content that is modified in the templates, and you can find all the changes in &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/commit/ae233c5407900b32af682407d902621e0a17bd38#diff-62ccd7caf19fda6d153b1958919d1f9d&#34; target=&#34;_blank&#34;&gt;this diff&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;updating-build-script-to-copy-assets-directory&#34;&gt;Updating Build Script To Copy Assets Directory&lt;/h2&gt;

&lt;p&gt;As we seen during the &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/#updating-build-script-to-copy-views-directory&#34; target=&#34;_blank&#34;&gt;dot liquid setup&lt;/a&gt;, we need to add an another Target &lt;code&gt;Assets&lt;/code&gt; to copy the &lt;em&gt;assets&lt;/em&gt; directory to the &lt;em&gt;build&lt;/em&gt; directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let copyToBuildDir srcDir targetDirName =
  let targetDir = combinePaths buildDir targetDirName
  CopyDir targetDir srcDir noFilter

Target &amp;quot;Assets&amp;quot; (fun _ -&amp;gt;
  copyToBuildDir &amp;quot;./src/FsTweet.Web/assets&amp;quot; &amp;quot;assets&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify the build order to run this Target before the &lt;code&gt;Run&lt;/code&gt; Target.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
==&amp;gt; &amp;quot;Views&amp;quot;
==&amp;gt; &amp;quot;Assets&amp;quot;
==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serving-asset-files&#34;&gt;Serving Asset Files&lt;/h2&gt;

&lt;p&gt;Now we have the assets available in the build directory. The next step is serving them Suave in response to the request from the browser.&lt;/p&gt;

&lt;p&gt;Suave has a lot of &lt;a href=&#34;https://suave.io/Suave.html#def:module Suave.Files&#34; target=&#34;_blank&#34;&gt;useful functions&lt;/a&gt; to handle files, and in our case, we are going to make use of the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.browseHome&#34; target=&#34;_blank&#34;&gt;browseHome&lt;/a&gt; function to serve the assets&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;browse&amp;rsquo; the file in the sense that the contents of the file are sent based on the request&amp;rsquo;s Url property. Will serve from the current as configured in directory. Suave&amp;rsquo;s runtime. - Suave Documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The current directory in our case is the directory in which the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; exists. i.e &lt;em&gt;build&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.Files

// ...
let serveAssets =
  pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  // ...
  let app = 
    choose [
      serveAssets
      path &amp;quot;/&amp;quot; &amp;gt;=&amp;gt; page &amp;quot;guest/home.liquid&amp;quot; &amp;quot;&amp;quot;
    ]
    
  startWebServer defaultConfig app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have made two changes here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;serveAssets&lt;/code&gt; defines a new &lt;a href=&#34;https://theimowski.gitbooks.io/suave-music-store/content/en/webpart.html&#34; target=&#34;_blank&#34;&gt;WebPart&lt;/a&gt; using the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Filters.pathRegex&#34; target=&#34;_blank&#34;&gt;pathRegex&lt;/a&gt;. It matches all the requests for the assets and serves the corresponding files using the &lt;code&gt;browseHome&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As we are handling more than one requests now, we need to change our &lt;code&gt;app&lt;/code&gt; to handle all of them. Using the &lt;a href=&#34;https://suave.io/composing.html&#34; target=&#34;_blank&#34;&gt;choose&lt;/a&gt; function, we are defining the &lt;code&gt;app&lt;/code&gt; to combine both &lt;code&gt;serveAssets&lt;/code&gt; webpart and the one that we already had for serving the guest home page.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;serving-favicon-ico&#34;&gt;Serving favicon.ico&lt;/h2&gt;

&lt;p&gt;While serving our &lt;em&gt;FsTweet&lt;/em&gt; application, the browser automatically makes a request for &lt;a href=&#34;https://en.wikipedia.org/wiki/Favicon&#34; target=&#34;_blank&#34;&gt;favicon&lt;/a&gt;. As the URL path for this request is &lt;code&gt;/favicon.ico&lt;/code&gt; our &lt;code&gt;serveAssets&lt;/code&gt; webpart cannot match this.&lt;/p&gt;

&lt;p&gt;To serve it we need to use an another specific path filter and use the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.file&#34; target=&#34;_blank&#34;&gt;file&lt;/a&gt; function to get the job done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
let serveAssets =
  let faviconPath = 
    Path.Combine(currentPath, &amp;quot;assets&amp;quot;, &amp;quot;images&amp;quot;, &amp;quot;favicon.ico&amp;quot;)
  choose [
    pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome
    path &amp;quot;/favicon.ico&amp;quot; &amp;gt;=&amp;gt; file faviconPath
  ]
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we learned how to serve static asset files in Suave. The source code can be found in the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-part&#34;&gt;Next Part&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/user-signup/&#34; target=&#34;_blank&#34;&gt;Handling User signup Form&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up FsTweet Project</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</link>
      <pubDate>Tue, 15 Aug 2017 20:02:30 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In this first part of the series on &lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/intro/&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt;, we will be starting the project from scratch and configuring it to use &lt;a href=&#34;https://fake.build/&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; and &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34; target=&#34;_blank&#34;&gt;Paket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating an empty directory with the name &lt;em&gt;FsTweet&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir FsTweet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use &lt;a href=&#34;http://forge.run/&#34; target=&#34;_blank&#34;&gt;Forge&lt;/a&gt;, a command line tool that provides tasks for creating and managing F# projects.&lt;/p&gt;

&lt;p&gt;This series uses Forge &lt;a href=&#34;https://github.com/fsharp-editing/Forge/releases/tag/1.4.2&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;version 1.4.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Post this version, Forge has been updated to work with dotnet core, and it&amp;rsquo;s not backward compatible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can install Forge, by following the &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Getting-started&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installation, initialize paket using the &lt;code&gt;forge paket init&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd FsTweet
&amp;gt; forge paket init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the &lt;em&gt;paket.exe&lt;/em&gt; in the &lt;em&gt;.paket&lt;/em&gt; directory along with &lt;em&gt;paket.dependencies&lt;/em&gt; file in the project root directory.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html#Framework-restrictions&#34; target=&#34;_blank&#34;&gt;restrict paket&lt;/a&gt; to use the .NET Framework 4.6.1 version, we need to add, &lt;code&gt;framework: net461&lt;/code&gt; in a new line in the &lt;em&gt;paket.dependencies&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you prefer to do this from your command line interface, you can achieve it using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo &#39;framework: net461&#39; &amp;gt;&amp;gt; paket.dependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/new-project&#34; target=&#34;_blank&#34;&gt;new project&lt;/a&gt; and adding the &lt;a href=&#34;https://fake.build/legacy-gettingstarted.html&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; using Forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Web --dir src -t suave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command creates a new console project in &lt;em&gt;./src/FsTweet.Web&lt;/em&gt; directory pre-configured with a Suave template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may encounter the following error while running this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Unhandled error:
  Could not find file &amp;quot;.../FsTweet/src/build.sh&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/issues/54#issuecomment-284559266&#34; target=&#34;_blank&#34;&gt;known issue&lt;/a&gt; in Forge which has been fixed in the later version. You can ignore it in our case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;We can verify the setup by building the project using Forge&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command internally calls the &lt;code&gt;fake&lt;/code&gt; command to build the project.&lt;/p&gt;

&lt;p&gt;Upon successful completion of this command, we can find the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; file in the &lt;em&gt;FsTweet/build&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;When you run it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;if you are on non-windows platform&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; mono build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will start the Suave standalone web server on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[21:42:45 INF] Smooth! Suave listener started in 138.226 with binding 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be seeing &lt;code&gt;Hello World!&lt;/code&gt;, when you curl the application&amp;rsquo;s root endpoint&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl http://127.0.0.1:8080/
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we will be building and running the application often during our development, let&amp;rsquo;s leverage Fake and Forge to simplify this mundane task.&lt;/p&gt;

&lt;p&gt;In the FAKE build script, &lt;em&gt;build.fsx&lt;/em&gt;, remove the &lt;code&gt;Deploy&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Deploy&amp;quot; (fun _ -&amp;gt;
    !! (buildDir + &amp;quot;/**/*.*&amp;quot;)
    -- &amp;quot;*.zip&amp;quot;
    |&amp;gt; Zip buildDir (deployDir + &amp;quot;ApplicationName.&amp;quot; + version + &amp;quot;.zip&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the &lt;code&gt;Run&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Run&amp;quot; (fun _ -&amp;gt; 
    ExecProcess 
        (fun info -&amp;gt; info.FileName &amp;lt;- &amp;quot;./build/FsTweet.Web.exe&amp;quot;)
        (System.TimeSpan.FromDays 1.)
    |&amp;gt; ignore
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name indicates, the &lt;code&gt;Run&lt;/code&gt; Target runs our application from the build directory using the &lt;a href=&#34;https://fake.build/apidocs/fake-core-process.html&#34; target=&#34;_blank&#34;&gt;ExecProcess&lt;/a&gt; function in FAKE.&lt;/p&gt;

&lt;p&gt;Then change the build order to use &lt;code&gt;Run&lt;/code&gt; instead of &lt;code&gt;Deploy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is creating &lt;em&gt;Forge.toml&lt;/em&gt; file in the root directory, &lt;em&gt;FsTweet&lt;/em&gt; and add an &lt;code&gt;run&lt;/code&gt; &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Aliases&#34; target=&#34;_blank&#34;&gt;alias&lt;/a&gt; to run Fake&amp;rsquo;s &lt;code&gt;Run&lt;/code&gt; target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Forge.toml
[alias]
  run=&#39;fake Run&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this alias in place, we can build and run our application using a single command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge run
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;From here on, the term &lt;em&gt;run/test drive the application&lt;/em&gt; in the following blog posts implies running this &lt;code&gt;forge run&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this part, we have learned how to bootstrap a project from scratch and configure it to use Paket and FAKE.&lt;/p&gt;

&lt;p&gt;Using Forge, we orchestrated the project setup, and the cherry on the cake is the alias to build and run our project with a single command!&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.0&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;next-part&#34;&gt;Next Part&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/&#34; target=&#34;_blank&#34;&gt;Setting Up Server Side Rendering using DotLiquid&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Twitter Clone in F# using Suave</title>
      <link>https://www.demystifyfp.com/fsharp/series/fstweet/intro/</link>
      <pubDate>Tue, 15 Aug 2017 08:14:37 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/fsharp/series/fstweet/intro/</guid>
      <description>

&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really excited to share with you the new blog post series, Creating a Twitter Clone in F# using Suave.&lt;/p&gt;

&lt;p&gt;The core objective of this series is answering the one question.&lt;/p&gt;

&lt;p&gt;How can I create a &lt;strong&gt;production-ready real-world business application end to end&lt;/strong&gt; in F# using functional programming principles?&lt;/p&gt;

&lt;p&gt;I believe F# is one of the elegant programming language that can help developers to deliver robust softwares and add value to the businesses.&lt;/p&gt;

&lt;p&gt;It kindles a new thought process, a better perspective for developing software products.&lt;/p&gt;

&lt;p&gt;In this series we will be starting from the scratch (right from creating an empty directory for the project) and incrementantly add business features one at a time and wrap up with deploying to Azure.&lt;/p&gt;

&lt;p&gt;Overall, It&amp;rsquo;s going to be lot of fun! Let&amp;rsquo;s start our journey.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/project-setup/&#34; target=&#34;_blank&#34;&gt;Setting Up FsTweet Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/&#34; target=&#34;_blank&#34;&gt;Setting Up Server Side Rendering using DotLiquid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/static-assets/&#34; target=&#34;_blank&#34;&gt;Serving Static Asset Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/user-signup/&#34; target=&#34;_blank&#34;&gt;Handling User signup Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/user-signup-validation/&#34; target=&#34;_blank&#34;&gt;Validating New User Signup Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/&#34; target=&#34;_blank&#34;&gt;Setting Up Database Migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/orchestrating-user-signup/&#34; target=&#34;_blank&#34;&gt;Orchestrating User Signup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/transforming-async-result-to-webpart/&#34; target=&#34;_blank&#34;&gt;Transforming Async Result to Webpart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/persisting-new-user/&#34; target=&#34;_blank&#34;&gt;Persisting New User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/sending-verification-email/&#34; target=&#34;_blank&#34;&gt;Sending Verification Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/verifying-user-email/&#34; target=&#34;_blank&#34;&gt;Verifying User Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/reorganising-code-and-refactoring/&#34; target=&#34;_blank&#34;&gt;Reorganising Code and Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/adding-login/&#34; target=&#34;_blank&#34;&gt;Adding Login Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/handling-login-request/&#34; target=&#34;_blank&#34;&gt;Handling Login Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/creating-user-session-and-authenticating-user/&#34; target=&#34;_blank&#34;&gt;Creating User Session and Authenticating User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/posting-new-tweet/&#34; target=&#34;_blank&#34;&gt;Posting New Tweet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/adding-user-feed/&#34; target=&#34;_blank&#34;&gt;Adding User Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/adding-user-profile-page/&#34; target=&#34;_blank&#34;&gt;Adding User Profile Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/following-a-user/&#34; target=&#34;_blank&#34;&gt;Following a User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/fetching-followers-and-following-users/&#34; target=&#34;_blank&#34;&gt;Fetching Followers and Following Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.demystifyfp.com/fsharp/series/fstweet/deploying-to-azure-app-service/&#34; target=&#34;_blank&#34;&gt;Deploying to Azure App Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;Adding Logs using Logary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;acknowledgement&#34;&gt;Acknowledgement&lt;/h2&gt;

&lt;p&gt;This entire series was initially planned to be released as a video course in &lt;a href=&#34;https://fsharp.tv/&#34; target=&#34;_blank&#34;&gt;FSharp.TV&lt;/a&gt; after my &lt;a href=&#34;https://www.udemy.com/learn-suave/?couponCode=DEMYSTIFY_FP&#34; target=&#34;_blank&#34;&gt;Build a Web Server based on Suave&lt;/a&gt; course. Due to some personal reasons, we couldn&amp;rsquo;t complete it. Thank you &lt;a href=&#34;https://twitter.com/MarkRGray&#34; target=&#34;_blank&#34;&gt;Mark&lt;/a&gt; for the courteous support to release the course as a blog series and book.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to thank the entire &lt;a href=&#34;http://fsharp.org/&#34; target=&#34;_blank&#34;&gt;F# Community&lt;/a&gt; for their open source contributions, support and thought provoking blog posts, articles and tutorials.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
