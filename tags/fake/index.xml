<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fake on Demystify FP</title>
    <link>http://www.demystifyfp.com/tags/fake/</link>
    <description>Recent content in Fake on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Sat, 26 Aug 2017 18:47:29 +0530</lastBuildDate>
    <atom:link href="/tags/fake/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Up Database Migration</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</link>
      <pubDate>Sat, 26 Aug 2017 18:47:29 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/user-signup-validation/&#34; target=&#34;_blank&#34;&gt;last blog post&lt;/a&gt;, we validated the signup details submitted by the user and transformed it into a domain model.&lt;/p&gt;

&lt;p&gt;The next step is persisting it in a database. We are going to use &lt;a href=&#34;https://www.postgresql.org&#34; target=&#34;_blank&#34;&gt;PostgreSQL&lt;/a&gt; to achieve it.&lt;/p&gt;

&lt;p&gt;In this sixth part of the &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series, we are going to learn how to setup PostgreSQL database migrations in fsharp using &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/orchestrating-user-signup/&#34; target=&#34;_blank&#34;&gt;following blog post&lt;/a&gt;, we will be orchastrating the user signup.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-database-migrations-project&#34;&gt;Creating a Database Migrations Project&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;s is one of the widely used Migration frameworks in .NET outside &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/jj591621(v=vs.113).aspx&#34; target=&#34;_blank&#34;&gt;EF code first migrations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we are not going to use EF in favor of &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt;, we are picking the fluent migrator to help us in managing the database schema.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating a new class library project, &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt;, in the &lt;em&gt;src&lt;/em&gt; directory, using forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Db.Migrations \
    --folder src -t classlib --no-fake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is adding the &lt;em&gt;FluentMigrator&lt;/em&gt; NuGet package and referring it in the newly created &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt; project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add FluentMigrator -g Database \
    -p src/FsTweet.Db.Migrations/FsTweet.Db.Migrations.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the paket&amp;rsquo;s &lt;a href=&#34;https://fsprojects.github.io/Paket/groups.html&#34; target=&#34;_blank&#34;&gt;dependency grouping&lt;/a&gt; feature using the &lt;code&gt;-g&lt;/code&gt; argument with the value &lt;code&gt;Database&lt;/code&gt;. It allows us to organize the dependencies better&lt;/p&gt;

&lt;p&gt;&lt;em&gt;paket.dependencies&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

group Database
source https://www.nuget.org/api/v2

nuget FluentMigrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator/wiki/Migration&#34; target=&#34;_blank&#34;&gt;a migration&lt;/a&gt; in Fluent Migrator, we need to create a new class inheriting Fluent Migrator&amp;rsquo;s &lt;code&gt;Migration&lt;/code&gt; abstract class.&lt;/p&gt;

&lt;p&gt;This class also has to have an attribute &lt;code&gt;Migration&lt;/code&gt; to specify the order of the migration and also it should override the &lt;code&gt;Up&lt;/code&gt; and &lt;code&gt;Down&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Fsharp provides nicer support &lt;a href=&#34;https://fsharpforfunandprofit.com/series/object-oriented-programming-in-fsharp.html&#34; target=&#34;_blank&#34;&gt;to write OO code&lt;/a&gt;. So writing the migration is straight forward and we don&amp;rsquo;t need to go back to &lt;em&gt;C#!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a first step, clean up the default code in the &lt;code&gt;FsTweet.Db.Migrations.fs&lt;/code&gt; file and update it as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace FsTweet.Db.Migrations

open FluentMigrator

[&amp;lt;Migration(201709250622L, &amp;quot;Creating User Table&amp;quot;)&amp;gt;]
type CreateUserTable()=
  inherit Migration()

  override this.Up() = ()
  override this.Down() = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;https://lostechies.com/seanchambers/2011/04/02/fluentmigrator-getting-started/&#34; target=&#34;_blank&#34;&gt;suggested&lt;/a&gt; by &lt;a href=&#34;https://lostechies.com/seanchambers/author/seanchambers/&#34; target=&#34;_blank&#34;&gt;Sean Chambers&lt;/a&gt;, one of core contributor of fluent migrator, we are using a time stamp in &lt;code&gt;YYYYMMDDHHMM&lt;/code&gt; format in UTC to specify the migration order.&lt;/p&gt;

&lt;p&gt;The next step is using the fluent methods offered by the fluent migrator we need to define the &lt;code&gt;Users&lt;/code&gt; table and its columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// ...
type CreateUserTable()=
  // ...
  override this.Up() = 
    base.Create.Table(&amp;quot;Users&amp;quot;)
      .WithColumn(&amp;quot;Id&amp;quot;).AsInt32().PrimaryKey().Identity()
      .WithColumn(&amp;quot;Username&amp;quot;).AsString(12).Unique().NotNullable()
      .WithColumn(&amp;quot;Email&amp;quot;).AsString(254).Unique().NotNullable()
      .WithColumn(&amp;quot;PasswordHash&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;EmailVerificationCode&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;IsEmailVerified&amp;quot;).AsBoolean()
    |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is overriding the &lt;code&gt;Down&lt;/code&gt; method. In the &lt;code&gt;Down&lt;/code&gt; method, we just need to delete the &lt;code&gt;Users&lt;/code&gt; table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type CreateUserTable()=
  // ...
  override this.Down() = 
    base.Delete.Table(&amp;quot;Users&amp;quot;) |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-the-migrations-project&#34;&gt;Building the Migrations Project&lt;/h2&gt;

&lt;p&gt;Now we have the migrations project in place, and it is all set to build and run.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a new FAKE Target &lt;code&gt;BuildMigrations&lt;/code&gt; in the build script to build the migrations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;BuildMigrations&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Db.Migrations/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot; 
  |&amp;gt; Log &amp;quot;MigrationBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to change the existing &lt;code&gt;Build&lt;/code&gt; target to build only the &lt;code&gt;FsTweet.Web&lt;/code&gt; project instead of all the &lt;code&gt;.fsproj&lt;/code&gt; projects in the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;Build&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Web/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot;
  |&amp;gt; Log &amp;quot;AppBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the migration against Postgres, we need to install the &lt;a href=&#34;http://www.npgsql.org/&#34; target=&#34;_blank&#34;&gt;Npgsql&lt;/a&gt; package from NuGet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add Npgsql -g Database --version 3.1.10
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of this writing there is &lt;a href=&#34;https://github.com/npgsql/npgsql/issues/1603&#34; target=&#34;_blank&#34;&gt;an issue&lt;/a&gt; with the latest version of Npgsql. So, we are using the version &lt;code&gt;3.1.10&lt;/code&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FAKE has inbuilt support for &lt;a href=&#34;https://fake.build/todo-fluentmigrator.html&#34; target=&#34;_blank&#34;&gt;running fluent migration&lt;/a&gt; from the build script.&lt;/p&gt;

&lt;p&gt;To do it add the references of the &lt;code&gt;FluentMigrator&lt;/code&gt; and &lt;code&gt;Npgsql&lt;/code&gt; DLLs in the build script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
#r &amp;quot;./packages/FAKE/tools/Fake.FluentMigrator.dll&amp;quot;
#r &amp;quot;./packages/database/Npgsql/lib/net45/Npgsql.dll&amp;quot;
// ...
open Fake.FluentMigratorHelper
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then define &lt;code&gt;RunMigrations&lt;/code&gt; Target with a &lt;code&gt;connString&lt;/code&gt; and a &lt;code&gt;dbConnection&lt;/code&gt; pointing to a local database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
let dbConnection = ConnectionString (connString, DatabaseProvider.PostgreSQL)

Target &amp;quot;RunMigrations&amp;quot; (fun _ -&amp;gt; 
  MigrateToLatest dbConnection [migrationsAssembly] DefaultMigrationOptions
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This migration script &lt;strong&gt;doesn&amp;rsquo;t create the database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, we need to create it manually before we run the script.&lt;/p&gt;

&lt;p&gt;The last step in running the migration script is adding it to the build script build order.&lt;/p&gt;

&lt;p&gt;We need to run the migrations before the &lt;code&gt;Build&lt;/code&gt; target, as we need to have the database schema in place to use &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt; to interact with the PostgreSQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;BuildMigrations&amp;quot;
==&amp;gt; &amp;quot;RunMigrations&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the build.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This command is an inbuilt alias in forge representing the &lt;code&gt;forge fake Build&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the build script is running, we can see the console log of the &lt;code&gt;RunMigrations&lt;/code&gt; target like the one below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
Starting Target: RunMigrations (==&amp;gt; BuildMigrations)
...
----------------------------------------------------
201709250622: CreateUserTable migrating
----------------------------------------------------
[+] Beginning Transaction
[+] CreateTable Users
[+] Committing Transaction
[+] 201709250622: CreateUserTable migrated
[+] Task completed.
Finished Target: RunMigrations
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon successful execution of the build script, we can verify the schema using &lt;a href=&#34;https://www.postgresql.org/docs/9.6/static/app-psql.html&#34; target=&#34;_blank&#34;&gt;psql&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; psql -d FsTweet
psql (9.6.2, server 9.5.1)
Type &amp;quot;help&amp;quot; for help.

FsTweet=# \d &amp;quot;Users&amp;quot;
                            Table &amp;quot;public.Users&amp;quot;

        Column         |          Type          |                      Modifiers
-----------------------+------------------------+------------------------------------------------------
 Id                    | integer                | not null default nextval(&#39;&amp;quot;Users_Id_seq&amp;quot;&#39;::regclass)
 Username              | character varying(12)  | not null
 Email                 | character varying(254) | not null
 PasswordHash          | text                   | not null
 EmailVerificationCode | text                   | not null
 IsEmailVerified       | boolean                | not null
Indexes:
    &amp;quot;PK_Users&amp;quot; PRIMARY KEY, btree (&amp;quot;Id&amp;quot;)
    &amp;quot;IX_Users_Email&amp;quot; UNIQUE, btree (&amp;quot;Email&amp;quot;)
    &amp;quot;IX_Users_Username&amp;quot; UNIQUE, btree (&amp;quot;Username&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool! The migrations went well :)&lt;/p&gt;

&lt;h2 id=&#34;extending-the-connection-string&#34;&gt;Extending the Connection String&lt;/h2&gt;

&lt;p&gt;In the script that we ran, the connection string is hard coded. To make it reusable across different build environments, we need to get it from the environment variable.&lt;/p&gt;

&lt;p&gt;FAKE has function &lt;code&gt;environVarOrDefault&lt;/code&gt;, which takes the value from the given environment name and if the environment variable is not available, it returns the provided default value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use this function in our build script to make it reusable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  environVarOrDefault 
    &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
    @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we learned how to set up database migration using Fluent Migrator in fsharp and leverage FAKE to run the migrations while running the build script.&lt;/p&gt;

&lt;p&gt;The source code for this blog post is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.5&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serving Static Asset Files</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</link>
      <pubDate>Sat, 19 Aug 2017 07:36:20 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/static-assets/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Welcome to the third part of the &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series.&lt;/p&gt;

&lt;p&gt;In this post, we will be changing the guest homepage from displaying &lt;code&gt;Hello, World!&lt;/code&gt; to a production ready landing page!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.demystifyfp.com/img/fsharp/series/fstweet/guest-home-page.png&#34; alt=&#34;Guest Home Page&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;preparing-static-asset-files&#34;&gt;Preparing Static Asset Files&lt;/h2&gt;

&lt;p&gt;As a first step let&amp;rsquo;s create an assets directory in &lt;em&gt;FsTweet.Web&lt;/em&gt; and place our static asset files. The asset files can be downloaded from the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2/src/FsTweet.Web/assets&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;└── FsTweet.Web
    ├── FsTweet.Web.fs
    ├── FsTweet.Web.fsproj
    ├── assets
    │   ├── css
    │   │   └── styles.css
    │   └── images
    │       ├── FsTweetLogo.png
    │       └── favicon.ico
    ├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modifying-master-page-and-guest-home-templates&#34;&gt;Modifying Master Page and Guest Home Templates&lt;/h2&gt;

&lt;p&gt;Then we need to change our liquid templates to use these assets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/master_page.liquid --&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;assets/css/styles.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- view/guest/home.liquid --&amp;gt;
&amp;lt;!-- ... --&amp;gt;
{% block content %}
&amp;lt;!-- ... --&amp;gt;
&amp;lt;div class=&amp;quot;jumbotron&amp;quot;&amp;gt;
   &amp;lt;img src=&amp;quot;assets/images/FsTweetLogo.png&amp;quot; width=&amp;quot;400px&amp;quot;/&amp;gt;
   &amp;lt;p class=&amp;quot;lead&amp;quot;&amp;gt;Communicate with the world in a different way!&amp;lt;/p&amp;gt;
   &amp;lt;!-- ... --&amp;gt;
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simplicity, I am leaving the other static content that is modified in the templates, and you can find all the changes in &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/commit/ae233c5407900b32af682407d902621e0a17bd38#diff-62ccd7caf19fda6d153b1958919d1f9d&#34; target=&#34;_blank&#34;&gt;this diff&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;updating-build-script-to-copy-assets-directory&#34;&gt;Updating Build Script To Copy Assets Directory&lt;/h2&gt;

&lt;p&gt;As we seen during the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/dotliquid-setup/#updating-build-script-to-copy-views-directory&#34; target=&#34;_blank&#34;&gt;dot liquid setup&lt;/a&gt;, we need to add an another Target &lt;code&gt;Assets&lt;/code&gt; to copy the &lt;em&gt;assets&lt;/em&gt; directory to the &lt;em&gt;build&lt;/em&gt; directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let copyToBuildDir srcDir targetDirName =
  let targetDir = combinePaths buildDir targetDirName
  CopyDir targetDir srcDir noFilter

Target &amp;quot;Assets&amp;quot; (fun _ -&amp;gt;
  copyToBuildDir &amp;quot;./src/FsTweet.Web/assets&amp;quot; &amp;quot;assets&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then modify the build order to run this Target before the &lt;code&gt;Run&lt;/code&gt; Target.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
==&amp;gt; &amp;quot;Views&amp;quot;
==&amp;gt; &amp;quot;Assets&amp;quot;
==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;serving-asset-files&#34;&gt;Serving Asset Files&lt;/h2&gt;

&lt;p&gt;Now we have the assets available in the build directory. The next step is serving them Suave in response to the request from the browser.&lt;/p&gt;

&lt;p&gt;Suave has a lot of &lt;a href=&#34;https://suave.io/Suave.html#def:module Suave.Files&#34; target=&#34;_blank&#34;&gt;useful functions&lt;/a&gt; to handle files, and in our case, we are going to make use of the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.browseHome&#34; target=&#34;_blank&#34;&gt;browseHome&lt;/a&gt; function to serve the assets&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;browse&amp;rsquo; the file in the sense that the contents of the file are sent based on the request&amp;rsquo;s Url property. Will serve from the current as configured in directory. Suave&amp;rsquo;s runtime. - Suave Documentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The current directory in our case is the directory in which the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; exists. i.e &lt;em&gt;build&lt;/em&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
open Suave.Files

// ...
let serveAssets =
  pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
  // ...
  let app = 
    choose [
      serveAssets
      path &amp;quot;/&amp;quot; &amp;gt;=&amp;gt; page &amp;quot;guest/home.liquid&amp;quot; &amp;quot;&amp;quot;
    ]
    
  startWebServer defaultConfig app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have made two changes here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;serveAssets&lt;/code&gt; defines a new &lt;a href=&#34;https://theimowski.gitbooks.io/suave-music-store/content/en/webpart.html&#34; target=&#34;_blank&#34;&gt;WebPart&lt;/a&gt; using the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Filters.pathRegex&#34; target=&#34;_blank&#34;&gt;pathRegex&lt;/a&gt;. It matches all the requests for the assets and serves the corresponding files using the &lt;code&gt;browseHome&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As we are handling more than one requests now, we need to change our &lt;code&gt;app&lt;/code&gt; to handle all of them. Using the &lt;a href=&#34;https://suave.io/composing.html&#34; target=&#34;_blank&#34;&gt;choose&lt;/a&gt; function, we are defining the &lt;code&gt;app&lt;/code&gt; to combine both &lt;code&gt;serveAssets&lt;/code&gt; webpart and the one that we already had for serving the guest home page.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;serving-favicon-ico&#34;&gt;Serving favicon.ico&lt;/h2&gt;

&lt;p&gt;While serving our &lt;em&gt;FsTweet&lt;/em&gt; application, the browser automatically makes a request for &lt;a href=&#34;https://en.wikipedia.org/wiki/Favicon&#34; target=&#34;_blank&#34;&gt;favicon&lt;/a&gt;. As the URL path for this request is &lt;code&gt;/favicon.ico&lt;/code&gt; our &lt;code&gt;serveAssets&lt;/code&gt; webpart cannot match this.&lt;/p&gt;

&lt;p&gt;To serve it we need to use an another specific path filter and use the &lt;a href=&#34;https://suave.io/Suave.html#def:val Suave.Files.file&#34; target=&#34;_blank&#34;&gt;file&lt;/a&gt; function to get the job done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FsTweet.Web.fs
// ...
let serveAssets =
  let faviconPath = 
    Path.Combine(currentPath, &amp;quot;assets&amp;quot;, &amp;quot;images&amp;quot;, &amp;quot;favicon.ico&amp;quot;)
  choose [
    pathRegex &amp;quot;/assets/*&amp;quot; &amp;gt;=&amp;gt; browseHome
    path &amp;quot;/favicon.ico&amp;quot; &amp;gt;=&amp;gt; file faviconPath
  ]
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we learned how to serve static asset files in Suave. The source code can be found in the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.2&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up FsTweet Project</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</link>
      <pubDate>Tue, 15 Aug 2017 20:02:30 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/project-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In this first part of the series on &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt;, we will be starting the project from scratch and configuring it to use &lt;a href=&#34;https://fake.build/&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; and &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34; target=&#34;_blank&#34;&gt;Paket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating an empty directory with the name &lt;em&gt;FsTweet&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mkdir FsTweet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use &lt;a href=&#34;http://forge.run/&#34; target=&#34;_blank&#34;&gt;Forge&lt;/a&gt;, a command line tool that provides tasks for creating and managing F# projects.&lt;/p&gt;

&lt;p&gt;This series uses Forge &lt;a href=&#34;https://github.com/fsharp-editing/Forge/releases/tag/1.4.2&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;version 1.4.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Post this version, Forge has been updated to work with dotnet core, and it&amp;rsquo;s not backward compatible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can install Forge, by following the &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Getting-started&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installation, initialize paket using the &lt;code&gt;forge paket init&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd FsTweet
&amp;gt; forge paket init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download the &lt;em&gt;paket.exe&lt;/em&gt; in the &lt;em&gt;.paket&lt;/em&gt; directory along with &lt;em&gt;paket.dependencies&lt;/em&gt; file in the project root directory.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html#Framework-restrictions&#34; target=&#34;_blank&#34;&gt;restrict paket&lt;/a&gt; to use the .NET Framework 4.6.1 version, we need to add, &lt;code&gt;framework: net461&lt;/code&gt; in a new line in the &lt;em&gt;paket.dependencies&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you prefer to do this from your bash, you can achieve it using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo &#39;framework: net461&#39; &amp;gt;&amp;gt; paket.dependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is creating a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/new-project&#34; target=&#34;_blank&#34;&gt;new project&lt;/a&gt; and adding the &lt;a href=&#34;https://fake.build/legacy-gettingstarted.html&#34; target=&#34;_blank&#34;&gt;FAKE&lt;/a&gt; using Forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Web --dir src -t suave
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command creates a new console project in &lt;em&gt;./src/FsTweet.Web&lt;/em&gt; directory pre-configured with a Suave template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may encounter the following error while running this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  Unhandled error:
  Could not find file &amp;quot;.../FsTweet/src/build.sh&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a &lt;a href=&#34;https://github.com/fsharp-editing/Forge/issues/54#issuecomment-284559266&#34; target=&#34;_blank&#34;&gt;known issue&lt;/a&gt; in Forge which has been fixed in the later version. You can ignore it in our case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s all!&lt;/p&gt;

&lt;p&gt;We can verify the setup by building the project using Forge&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command internally calls the &lt;code&gt;fake&lt;/code&gt; command to build the project.&lt;/p&gt;

&lt;p&gt;Upon successful completion of this command, we can find the &lt;em&gt;FsTweet.Web.exe&lt;/em&gt; file in the &lt;em&gt;FsTweet/build&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;When you run it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;if you are on non-windows platform&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;gt; mono build/FsTweet.Web.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will start the Suave standalone web server on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[21:42:45 INF] Smooth! Suave listener started in 138.226 with binding 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will be seeing &lt;code&gt;Hello World!&lt;/code&gt;, when you curl the application&amp;rsquo;s root endpoint&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl http://127.0.0.1:8080/
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we will be building and running the application often during our development, let&amp;rsquo;s leverage Fake and Forge to simplify this mundane task.&lt;/p&gt;

&lt;p&gt;In the FAKE build script, &lt;em&gt;build.fsx&lt;/em&gt;, remove the &lt;code&gt;Deploy&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Deploy&amp;quot; (fun _ -&amp;gt;
    !! (buildDir + &amp;quot;/**/*.*&amp;quot;)
    -- &amp;quot;*.zip&amp;quot;
    |&amp;gt; Zip buildDir (deployDir + &amp;quot;ApplicationName.&amp;quot; + version + &amp;quot;.zip&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and add the &lt;code&gt;Run&lt;/code&gt; Target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
Target &amp;quot;Run&amp;quot; (fun _ -&amp;gt; 
    ExecProcess 
        (fun info -&amp;gt; info.FileName &amp;lt;- &amp;quot;./build/FsTweet.Web.exe&amp;quot;)
        (System.TimeSpan.FromDays 1.)
    |&amp;gt; ignore
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the name indicates, the &lt;code&gt;Run&lt;/code&gt; Target runs our application from the build directory using the &lt;a href=&#34;https://fake.build/apidocs/fake-core-process.html&#34; target=&#34;_blank&#34;&gt;ExecProcess&lt;/a&gt; function in FAKE.&lt;/p&gt;

&lt;p&gt;Then change the build order to use &lt;code&gt;Run&lt;/code&gt; instead of &lt;code&gt;Deploy&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Build order
&amp;quot;Clean&amp;quot;
  ==&amp;gt; &amp;quot;Build&amp;quot;
  ==&amp;gt; &amp;quot;Run&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is creating &lt;em&gt;Forge.toml&lt;/em&gt; file in the root directory, &lt;em&gt;FsTweet&lt;/em&gt; and add an &lt;code&gt;run&lt;/code&gt; &lt;a href=&#34;https://github.com/fsharp-editing/Forge/wiki/Aliases&#34; target=&#34;_blank&#34;&gt;alias&lt;/a&gt; to run Fake&amp;rsquo;s &lt;code&gt;Run&lt;/code&gt; target&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Forge.toml
[alias]
  run=&#39;fake Run&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this alias in place, we can build and run our application using a single command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge run
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;From here on, the term &lt;em&gt;run/test drive the application&lt;/em&gt; in the following blog posts implies running this &lt;code&gt;forge run&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this part, we have learned how to bootstrap a project from scratch and configure it to use Paket and FAKE.&lt;/p&gt;

&lt;p&gt;Using Forge, we orchestrated the project setup, and the cherry on the cake is the alias to build and run our project with a single command!&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.0&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
