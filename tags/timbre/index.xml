<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timbre on Demystify FP</title>
    <link>https://www.demystifyfp.com/tags/timbre/</link>
    <description>Recent content in Timbre on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Sun, 06 Oct 2019 20:25:41 +0530</lastBuildDate>
    
	<atom:link href="https://www.demystifyfp.com/tags/timbre/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Slack as Log Appender</title>
      <link>https://www.demystifyfp.com/clojure/marketplace-middleware/using-slack-as-log-appender/</link>
      <pubDate>Sun, 06 Oct 2019 20:25:41 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/clojure/marketplace-middleware/using-slack-as-log-appender/</guid>
      <description>The back-office team of our client has an active slack based workflow for most of their systems. As this middleware is going to be another system that they need to keep track of, they asked us to send messages on Slack if the middleware encounters an error during its operation. In this blog post, I am going to share how we did it in Clojure using Timbre.
 This blog post is a part 5 of the blog series Building an E-Commerce Marketplace Middleware in Clojure.</description>
    </item>
    
    <item>
      <title>Storing Log Events in Postgres Using Toucan</title>
      <link>https://www.demystifyfp.com/clojure/marketplace-middleware/storing-log-events-in-postgres-using-toucan/</link>
      <pubDate>Fri, 04 Oct 2019 17:55:02 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/clojure/marketplace-middleware/storing-log-events-in-postgres-using-toucan/</guid>
      <description>In the last blog post, we configured Timbre to log the events in the Console. In this blog post, we are going to add a database appender to persist the domain level events alone in Postgres using Toucan.
 This blog post is a part 4 of the blog series Building an E-Commerce Marketplace Middleware in Clojure.
 Adding Migration Script Let&amp;rsquo;s get started by adding the migration script to create the event table in the database.</description>
    </item>
    
    <item>
      <title>Configuring Logging Using Timbre</title>
      <link>https://www.demystifyfp.com/clojure/marketplace-middleware/configuring-logging-using-timbre/</link>
      <pubDate>Wed, 02 Oct 2019 05:50:01 +0530</pubDate>
      
      <guid>https://www.demystifyfp.com/clojure/marketplace-middleware/configuring-logging-using-timbre/</guid>
      <description>In the first two blog posts of the blog series Building an E-Commerce Marketplace Middleware in Clojure, we learnt how to bootstrap a Clojure project using Mount &amp;amp; Aero and how to configure database connection pooling &amp;amp; database migration along with reloaded workflow. We are going to continue setting up the infrastructure, and in this blog post, we are going to take up logging using Timbre.
Timbre is a Clojure/Script logging library that enables to configure logging using a simple Clojure map.</description>
    </item>
    
  </channel>
</rss>