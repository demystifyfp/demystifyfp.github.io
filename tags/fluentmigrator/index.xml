<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fluentmigrator on Demystify FP</title>
    <link>http://www.demystifyfp.com/tags/fluentmigrator/</link>
    <description>Recent content in Fluentmigrator on Demystify FP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Demystify FP</copyright>
    <lastBuildDate>Sat, 26 Aug 2017 18:47:29 +0530</lastBuildDate>
    <atom:link href="/tags/fluentmigrator/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Up Database Migration</title>
      <link>http://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</link>
      <pubDate>Sat, 26 Aug 2017 18:47:29 +0530</pubDate>
      
      <guid>http://www.demystifyfp.com/fsharp/series/fstweet/db-migration-setup/</guid>
      <description>

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/user-signup-validation/&#34; target=&#34;_blank&#34;&gt;last blog post&lt;/a&gt;, we validated the signup details submitted by the user and transformed it into a domain model.&lt;/p&gt;

&lt;p&gt;The next step is persisting it in a database. We are going to use &lt;a href=&#34;https://www.postgresql.org&#34; target=&#34;_blank&#34;&gt;PostgreSQL&lt;/a&gt; to achieve it.&lt;/p&gt;

&lt;p&gt;In this sixth part of the &lt;a href=&#34;TODO&#34; target=&#34;_blank&#34;&gt;Creating a Twitter Clone in F# using Suave&lt;/a&gt; blog post series, we are going to learn how to setup PostgreSQL database migrations in fsharp using &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://www.demystifyfp.com/fsharp/series/fstweet/orchestrating-user-signup/&#34; target=&#34;_blank&#34;&gt;following blog post&lt;/a&gt;, we will be orchastrating the user signup.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-database-migrations-project&#34;&gt;Creating a Database Migrations Project&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator&#34; target=&#34;_blank&#34;&gt;Fluent Migrator&lt;/a&gt;s is one of the widely used Migration frameworks in .NET outside &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/jj591621(v=vs.113).aspx&#34; target=&#34;_blank&#34;&gt;EF code first migrations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As we are not going to use EF in favor of &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt;, we are picking the fluent migrator to help us in managing the database schema.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started by creating a new class library project, &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt;, in the &lt;em&gt;src&lt;/em&gt; directory, using forge.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge new project -n FsTweet.Db.Migrations \
    --folder src -t classlib --no-fake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is adding the &lt;em&gt;FluentMigrator&lt;/em&gt; NuGet package and referring it in the newly created &lt;em&gt;FsTweet.Db.Migrations&lt;/em&gt; project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add FluentMigrator -g Database \
    -p src/FsTweet.Db.Migrations/FsTweet.Db.Migrations.fsproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using the paket&amp;rsquo;s &lt;a href=&#34;https://fsprojects.github.io/Paket/groups.html&#34; target=&#34;_blank&#34;&gt;dependency grouping&lt;/a&gt; feature using the &lt;code&gt;-g&lt;/code&gt; argument with the value &lt;code&gt;Database&lt;/code&gt;. It allows us to organize the dependencies better&lt;/p&gt;

&lt;p&gt;&lt;em&gt;paket.dependencies&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

group Database
source https://www.nuget.org/api/v2

nuget FluentMigrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create &lt;a href=&#34;https://github.com/fluentmigrator/fluentmigrator/wiki/Migration&#34; target=&#34;_blank&#34;&gt;a migration&lt;/a&gt; in Fluent Migrator, we need to create a new class inheriting Fluent Migrator&amp;rsquo;s &lt;code&gt;Migration&lt;/code&gt; abstract class.&lt;/p&gt;

&lt;p&gt;This class also has to have an attribute &lt;code&gt;Migration&lt;/code&gt; to specify the order of the migration and also it should override the &lt;code&gt;Up&lt;/code&gt; and &lt;code&gt;Down&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Fsharp provides nicer support &lt;a href=&#34;https://fsharpforfunandprofit.com/series/object-oriented-programming-in-fsharp.html&#34; target=&#34;_blank&#34;&gt;to write OO code&lt;/a&gt;. So writing the migration is straight forward and we don&amp;rsquo;t need to go back to &lt;em&gt;C#!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a first step, clean up the default code in the &lt;code&gt;FsTweet.Db.Migrations.fs&lt;/code&gt; file and update it as below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;namespace FsTweet.Db.Migrations

open FluentMigrator

[&amp;lt;Migration(201709250622L, &amp;quot;Creating User Table&amp;quot;)&amp;gt;]
type CreateUserTable()=
  inherit Migration()

  override this.Up() = ()
  override this.Down() = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;a href=&#34;https://lostechies.com/seanchambers/2011/04/02/fluentmigrator-getting-started/&#34; target=&#34;_blank&#34;&gt;suggested&lt;/a&gt; by &lt;a href=&#34;https://lostechies.com/seanchambers/author/seanchambers/&#34; target=&#34;_blank&#34;&gt;Sean Chambers&lt;/a&gt;, one of core contributor of fluent migrator, we are using a time stamp in &lt;code&gt;YYYYMMDDHHMM&lt;/code&gt; format in UTC to specify the migration order.&lt;/p&gt;

&lt;p&gt;The next step is using the fluent methods offered by the fluent migrator we need to define the &lt;code&gt;Users&lt;/code&gt; table and its columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// ...
type CreateUserTable()=
  // ...
  override this.Up() = 
    base.Create.Table(&amp;quot;Users&amp;quot;)
      .WithColumn(&amp;quot;Id&amp;quot;).AsInt32().PrimaryKey().Identity()
      .WithColumn(&amp;quot;Username&amp;quot;).AsString(12).NotNullable()
      .WithColumn(&amp;quot;Email&amp;quot;).AsString(254).NotNullable()
      .WithColumn(&amp;quot;PasswordHash&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;EmailVerificationCode&amp;quot;).AsString().NotNullable()
      .WithColumn(&amp;quot;IsEmailVerified&amp;quot;).AsBoolean()
    |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last step is overriding the &lt;code&gt;Down&lt;/code&gt; method. In the &lt;code&gt;Down&lt;/code&gt; method, we just need to delete the &lt;code&gt;Users&lt;/code&gt; table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type CreateUserTable()=
  // ...
  override this.Down() = 
    base.Delete.Table(&amp;quot;Users&amp;quot;) |&amp;gt; ignore
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-the-migrations-project&#34;&gt;Building the Migrations Project&lt;/h2&gt;

&lt;p&gt;Now we have the migrations project in place, and it is all set to build and run.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a new FAKE Target &lt;code&gt;BuildMigrations&lt;/code&gt; in the build script to build the migrations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;BuildMigrations&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Db.Migrations/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot; 
  |&amp;gt; Log &amp;quot;MigrationBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to change the existing &lt;code&gt;Build&lt;/code&gt; target to build only the &lt;code&gt;FsTweet.Web&lt;/code&gt; project instead of all the &lt;code&gt;.fsproj&lt;/code&gt; projects in the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
Target &amp;quot;Build&amp;quot; (fun _ -&amp;gt;
  !! &amp;quot;src/FsTweet.Web/*.fsproj&amp;quot;
  |&amp;gt; MSBuildDebug buildDir &amp;quot;Build&amp;quot;
  |&amp;gt; Log &amp;quot;AppBuild-Output: &amp;quot;
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the migration against Postgres, we need to install the &lt;a href=&#34;http://www.npgsql.org/&#34; target=&#34;_blank&#34;&gt;Npgsql&lt;/a&gt; package from NuGet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; forge paket add Npgsql -g Database --version 3.1.10
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of this writing there is &lt;a href=&#34;https://github.com/npgsql/npgsql/issues/1603&#34; target=&#34;_blank&#34;&gt;an issue&lt;/a&gt; with the latest version of Npgsql. So, we are using the version &lt;code&gt;3.1.10&lt;/code&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FAKE has inbuilt support for &lt;a href=&#34;https://fake.build/todo-fluentmigrator.html&#34; target=&#34;_blank&#34;&gt;running fluent migration&lt;/a&gt; from the build script.&lt;/p&gt;

&lt;p&gt;To do it add the references of the &lt;code&gt;FluentMigrator&lt;/code&gt; and &lt;code&gt;Npgsql&lt;/code&gt; DLLs in the build script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
#r &amp;quot;./packages/FAKE/tools/Fake.FluentMigrator.dll&amp;quot;
#r &amp;quot;./packages/database/Npgsql/lib/net45/Npgsql.dll&amp;quot;
// ...
open Fake.FluentMigratorHelper
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then define &lt;code&gt;RunMigrations&lt;/code&gt; Target with a &lt;code&gt;connString&lt;/code&gt; and a &lt;code&gt;dbConnection&lt;/code&gt; pointing to a local database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
let dbConnection = ConnectionString (connString, DatabaseProvider.PostgreSQL)

Target &amp;quot;RunMigrations&amp;quot; (fun _ -&amp;gt; 
  MigrateToLatest dbConnection [migrationsAssembly] DefaultMigrationOptions
)
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This migration script &lt;strong&gt;doesn&amp;rsquo;t create the database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, we need to create it manually before we run the script.&lt;/p&gt;

&lt;p&gt;The last step in running the migration script is adding it to the build script build order.&lt;/p&gt;

&lt;p&gt;We need to run the migrations before the &lt;code&gt;Build&lt;/code&gt; target, as we need to have the database schema in place to use &lt;a href=&#34;fsprojects.github.io/SQLProvider/&#34; target=&#34;_blank&#34;&gt;SQLProvider&lt;/a&gt; to interact with the PostgreSQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
&amp;quot;Clean&amp;quot;
==&amp;gt; &amp;quot;BuildMigrations&amp;quot;
==&amp;gt; &amp;quot;RunMigrations&amp;quot;
==&amp;gt; &amp;quot;Build&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the build.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;&amp;gt; forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This command is an inbuilt alias in forge representing the &lt;code&gt;forge fake Build&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the build script is running, we can see the console log of the &lt;code&gt;RunMigrations&lt;/code&gt; target like the one below&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
Starting Target: RunMigrations (==&amp;gt; BuildMigrations)
...
----------------------------------------------------
201709250622: CreateUserTable migrating
----------------------------------------------------
[+] Beginning Transaction
[+] CreateTable Users
[+] Committing Transaction
[+] 201709250622: CreateUserTable migrated
[+] Task completed.
Finished Target: RunMigrations
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon successful execution of the build script, we can verify the schema using &lt;a href=&#34;https://www.postgresql.org/docs/9.6/static/app-psql.html&#34; target=&#34;_blank&#34;&gt;psql&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; psql -d FsTweet
psql (9.6.2, server 9.5.1)
Type &amp;quot;help&amp;quot; for help.

FsTweet=# \d &amp;quot;Users&amp;quot;
                            Table &amp;quot;public.Users&amp;quot;

        Column         |          Type          |                      Modifiers
-----------------------+------------------------+------------------------------------------------------
 Id                    | integer                | not null default nextval(&#39;&amp;quot;Users_Id_seq&amp;quot;&#39;::regclass)
 Username              | character varying(12)  | not null
 Email                 | character varying(254) | not null
 PasswordHash          | text                   | not null
 EmailVerificationCode | text                   | not null
 IsEmailVerified       | boolean                | not null
Indexes:
    &amp;quot;PK_Users&amp;quot; PRIMARY KEY, btree (&amp;quot;Id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool! The migrations went well :)&lt;/p&gt;

&lt;h2 id=&#34;extending-the-connection-string&#34;&gt;Extending the Connection String&lt;/h2&gt;

&lt;p&gt;In the script that we ran, the connection string is hard coded. To make it reusable across different build environments, we need to get it from the environment variable.&lt;/p&gt;

&lt;p&gt;FAKE has function &lt;code&gt;environVarOrDefault&lt;/code&gt;, which takes the value from the given environment name and if the environment variable is not available, it returns the provided default value.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use this function in our build script to make it reusable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// build.fsx
// ...
let connString = 
  environVarOrDefault 
    &amp;quot;FSTWEET_DB_CONN_STRING&amp;quot;
    @&amp;quot;Server=127.0.0.1;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&amp;quot;
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog post, we learned how to set up database migration using Fluent Migrator in fsharp and leverage FAKE to run the migrations while running the build script.&lt;/p&gt;

&lt;p&gt;The source code for this blog post is available on &lt;a href=&#34;https://github.com/demystifyfp/FsTweet/tree/v0.5&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
